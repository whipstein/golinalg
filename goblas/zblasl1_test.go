package goblas

import (
	"fmt"
	"math"
	"testing"

	"github.com/whipstein/golinalg/mat"
)

func TestZblasLevel1(t *testing.T) {
	var i, len, n, np1 int
	sfac := 9.765625e-4
	icase := &common.combla.icase
	ntest := &common.combla.n
	incx := &common.combla.incx
	incy := &common.combla.incy
	_case := &common.combla._case
	pass := &common.combla.pass

	fmt.Printf(" Complex BLAS Test Program Results\n \n")
	for _, *_case = range []string{"Dznrm2", "Dzasum", "Zscal", "Zdscal", "Izamax", "Zdotc", "Zdotu", "Zaxpy", "Zcopy", "Zswap"} {
		*pass = true
		n = 0
		*ntest = 0

		if *_case == "Dznrm2" || *_case == "Dzasum" || *_case == "Zscal" || *_case == "Zdscal" || *_case == "Izamax" {
			var ca complex128
			var sa float64
			mwpcs := cvf(5)
			mwpct := cvf(5)

			sa, ca = 0.3, (0.4 + (-0.7)*1i)
			cv := cvdf([]complex128{(0.1 + 0.1*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (0.3 + (-0.4)*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (0.1 + (-0.3)*1i), (0.5 + (-0.1)*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (0.1 + 0.1*1i), (-0.6 + 0.1*1i), (0.1 + (-0.3)*1i), (7.0 + 8.0*1i), (7.0 + 8.0*1i), (7.0 + 8.0*1i), (7.0 + 8.0*1i), (7.0 + 8.0*1i), (0.3 + 0.1*1i), (0.5 + 0.0*1i), (0.0 + 0.5*1i), (0.0 + 0.2*1i), (2.0 + 3.0*1i), (2.0 + 3.0*1i), (2.0 + 3.0*1i), (2.0 + 3.0*1i), (0.1 + 0.1*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (0.3 + (-0.4)*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (0.1 + (-0.3)*1i), (8.0 + 9.0*1i), (0.5 + (-0.1)*1i), (2.0 + 5.0*1i), (2.0 + 5.0*1i), (2.0 + 5.0*1i), (2.0 + 5.0*1i), (2.0 + 5.0*1i), (0.1 + 0.1*1i), (3.0 + 6.0*1i), (-0.6 + 0.1*1i), (4.0 + 7.0*1i), (0.1 + (-0.3)*1i), (7.0 + 2.0*1i), (7.0 + 2.0*1i), (7.0 + 2.0*1i), (0.3 + 0.1*1i), (5.0 + 8.0*1i), (0.5 + 0.0*1i), (6.0 + 9.0*1i), (0.0 + 0.5*1i), (8.0 + 3.0*1i), (0.0 + 0.2*1i), (9.0 + 4.0*1i)})
			strue2 := vdf([]float64{0.0, 0.5, 0.6, 0.7, 0.8})
			strue4 := vdf([]float64{0.0, 0.7, 1.0, 1.3, 1.6})
			ctrue5 := cvdf([]complex128{(0.1 + 0.1*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (-0.16 + (-0.37)*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (-0.17 + (-0.19)*1i), (0.13 + (-0.39)*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (0.11 + (-0.03)*1i), (-0.17 + 0.46*1i), (-0.17 + (-0.19)*1i), (7.0 + 8.0*1i), (7.0 + 8.0*1i), (7.0 + 8.0*1i), (7.0 + 8.0*1i), (7.0 + 8.0*1i), (0.19 + (-0.17)*1i), (0.20 + (-0.35)*1i), (0.35 + 0.20*1i), (0.14 + 0.08*1i), (2.0 + 3.0*1i), (2.0 + 3.0*1i), (2.0 + 3.0*1i), (2.0 + 3.0*1i), (0.1 + 0.1*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (-0.16 + (-0.37)*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (-0.17 + (-0.19)*1i), (8.0 + 9.0*1i), (0.13 + (-0.39)*1i), (2.0 + 5.0*1i), (2.0 + 5.0*1i), (2.0 + 5.0*1i), (2.0 + 5.0*1i), (2.0 + 5.0*1i), (0.11 + (-0.03)*1i), (3.0 + 6.0*1i), (-0.17 + 0.46*1i), (4.0 + 7.0*1i), (-0.17 + (-0.19)*1i), (7.0 + 2.0*1i), (7.0 + 2.0*1i), (7.0 + 2.0*1i), (0.19 + (-0.17)*1i), (5.0 + 8.0*1i), (0.20 + (-0.35)*1i), (6.0 + 9.0*1i), (0.35 + 0.20*1i), (8.0 + 3.0*1i), (0.14 + 0.08*1i), (9.0 + 4.0*1i)})
			ctrue6 := cvdf([]complex128{(0.1 + 0.1*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (1.0 + 2.0*1i), (0.09 + (-0.12)*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (3.0 + 4.0*1i), (0.03 + (-0.09)*1i), (0.15 + (-0.03)*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (5.0 + 6.0*1i), (0.03 + 0.03*1i), (-0.18 + 0.03*1i), (0.03 + (-0.09)*1i), (7.0 + 8.0*1i), (7.0 + 8.0*1i), (7.0 + 8.0*1i), (7.0 + 8.0*1i), (7.0 + 8.0*1i), (0.09 + 0.03*1i), (0.15 + 0.00*1i), (0.00 + 0.15*1i), (0.00 + 0.06*1i), (2.0 + 3.0*1i), (2.0 + 3.0*1i), (2.0 + 3.0*1i), (2.0 + 3.0*1i), (0.1 + 0.1*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (4.0 + 5.0*1i), (0.09 + (-0.12)*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (6.0 + 7.0*1i), (0.03 + (-0.09)*1i), (8.0 + 9.0*1i), (0.15 + (-0.03)*1i), (2.0 + 5.0*1i), (2.0 + 5.0*1i), (2.0 + 5.0*1i), (2.0 + 5.0*1i), (2.0 + 5.0*1i), (0.03 + 0.03*1i), (3.0 + 6.0*1i), (-0.18 + 0.03*1i), (4.0 + 7.0*1i), (0.03 + (-0.09)*1i), (7.0 + 2.0*1i), (7.0 + 2.0*1i), (7.0 + 2.0*1i), (0.09 + 0.03*1i), (5.0 + 8.0*1i), (0.15 + 0.00*1i), (6.0 + 9.0*1i), (0.00 + 0.15*1i), (8.0 + 3.0*1i), (0.00 + 0.06*1i), (9.0 + 4.0*1i)})
			itrue3 := []int{0, 1, 2, 2, 2}

			for (*incx) = 1; (*incx) <= 2; (*incx)++ {
				for np1 = 1; np1 <= 5; np1++ {
					n = np1 - 1
					len = 2 * maxint(n, 1)

					if (*icase) == 6 {
						//              .. DZNRM2 ..
						dcompare1(Dznrm2(&n, cv.Off(0+(np1-1+((*incx)-1)*2)*5), incx), strue2.Get(np1-1), strue2.Get(np1-1), sfac, t)
					} else if (*icase) == 7 {
						//              .. DZASUM ..
						dcompare1(Dzasum(&n, cv.Off(0+(np1-1+((*incx)-1)*2)*5), incx), strue4.Get(np1-1), strue4.Get(np1-1), sfac, t)
					} else if (*icase) == 8 {
						//              .. ZSCAL ..
						Zscal(&n, &ca, cv.Off(0+(np1-1+((*incx)-1)*2)*5), incx)
						zcompare(len, cv.Off(0+(np1-1+((*incx)-1)*2)*5), ctrue5.Off(0+(np1-1+((*incx)-1)*2)*5), ctrue5.Off(0+(np1-1+((*incx)-1)*2)*5), sfac, t)
					} else if (*icase) == 9 {
						//              .. ZDSCAL ..
						Zdscal(&n, &sa, cv.Off(0+(np1-1+((*incx)-1)*2)*5), incx)
						zcompare(len, cv.Off(0+(np1-1+((*incx)-1)*2)*5), ctrue6.Off(0+(np1-1+((*incx)-1)*2)*5), ctrue6.Off(0+(np1-1+((*incx)-1)*2)*5), sfac, t)
					} else if (*icase) == 10 {
						//              .. IZAMAX ..
						icompare1(Izamax(&n, cv.Off(0+(np1-1+((*incx)-1)*2)*5), incx), itrue3[np1-1], t)
					}

					*ntest++
				}
			}

			(*incx) = 1
			if *_case == "Zscal" {
				//        ZSCAL
				//        Add a test for alpha equal to zero.
				ca = (0.0 + 0.0*1i)
				for i = 1; i <= 5; i++ {
					mwpct.Set(i-1, (0.0 + 0.0*1i))
					mwpcs.Set(i-1, (1.0 + 1.0*1i))
				}
				Zscal(func() *int { y := 5; return &y }(), &ca, cv.Off(0+(np1-1+((*incx)-1)*2)*5), incx)
				zcompare(5, cv.Off(0+(np1-1+((*incx)-1)*2)*5), mwpct, mwpcs, sfac, t)
				*ntest++
			} else if *_case == "Zdscal" {
				//        ZDSCAL
				//        Add a test for alpha equal to zero.
				sa = 0.0
				for i = 1; i <= 5; i++ {
					mwpct.Set(i-1, (0.0 + 0.0*1i))
					mwpcs.Set(i-1, (1.0 + 1.0*1i))
				}
				Zdscal(func() *int { y := 5; return &y }(), &sa, cv.Off(0+(np1-1+((*incx)-1)*2)*5), incx)
				zcompare(5, cv.Off(0+(np1-1+((*incx)-1)*2)*5), mwpct, mwpcs, sfac, t)
				*ntest++
				//        Add a test for alpha equal to one.
				sa = 1.0
				for i = 1; i <= 5; i++ {
					mwpct.Set(i-1, cv.Get(i-1+(np1-1+((*incx)-1)*2)*5))
					mwpcs.Set(i-1, cv.Get(i-1+(np1-1+((*incx)-1)*2)*5))
				}
				Zdscal(func() *int { y := 5; return &y }(), &sa, cv.Off(0+(np1-1+((*incx)-1)*2)*5), incx)
				zcompare(5, cv.Off(0+(np1-1+((*incx)-1)*2)*5), mwpct, mwpcs, sfac, t)
				*ntest++
				//        Add a test for alpha equal to minus one.
				sa = -1.0
				for i = 1; i <= 5; i++ {
					mwpct.Set(i-1, -cv.Get(i-1+(np1-1+((*incx)-1)*2)*5))
					mwpcs.Set(i-1, -cv.Get(i-1+(np1-1+((*incx)-1)*2)*5))
				}
				Zdscal(func() *int { y := 5; return &y }(), &sa, cv.Off(0+(np1-1+((*incx)-1)*2)*5), incx)
				zcompare(5, cv.Off(0+(np1-1+((*incx)-1)*2)*5), mwpct, mwpcs, sfac, t)
				*ntest++
			}

			if *pass {
				passL1()
			}
		} else if *_case == "Zdotc" || *_case == "Zdotu" || *_case == "Zaxpy" || *_case == "Zcopy" || *_case == "Zswap" {
			var ki, kn, ksize, lenx, leny, mx, my int
			cdot := cvf(1)

			ca := (0.4 + (-0.7)*1i)
			incxs := []int{1, 2, -2, -1}
			incys := []int{1, -2, 1, -2}
			lens := []int{1, 1, 2, 4, 1, 1, 3, 7}
			ns := []int{0, 1, 2, 4}
			cx1 := cvdf([]complex128{(0.7 + (-0.8)*1i), (-0.4 + (-0.7)*1i), (-0.1 + (-0.9)*1i), (0.2 + (-0.8)*1i), (-0.9 + (-0.4)*1i), (0.1 + 0.4*1i), (-0.6 + 0.6*1i)})
			cy1 := cvdf([]complex128{(0.6 + (-0.6)*1i), (-0.9 + 0.5*1i), (0.7 + (-0.6)*1i), (0.1 + (-0.5)*1i), (-0.1 + (-0.2)*1i), (-0.5 + (-0.3)*1i), (0.8 + (-0.7)*1i)})
			ct8 := cvdf([]complex128{(0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.32 + (-1.41)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.32 + (-1.41)*1i), (-1.55 + 0.5*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.32 + (-1.41)*1i), (-1.55 + 0.5*1i), (0.03 + (-0.89)*1i), (-0.38 + (-0.96)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.32 + (-1.41)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (-0.07 + (-0.89)*1i), (-0.9 + 0.5*1i), (0.42 + (-1.41)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.78 + 0.06*1i), (-0.9 + 0.5*1i), (0.06 + (-0.13)*1i), (0.1 + (-0.5)*1i), (-0.77 + (-0.49)*1i), (-0.5 + (-0.3)*1i), (0.52 + (-1.51)*1i), (0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.32 + (-1.41)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (-0.07 + (-0.89)*1i), (-1.18 + (-0.31)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.78 + 0.06*1i), (-1.54 + 0.97*1i), (0.03 + (-0.89)*1i), (-0.18 + (-1.31)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.32 + (-1.41)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.32 + (-1.41)*1i), (-0.9 + 0.5*1i), (0.05 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.32 + (-1.41)*1i), (-0.9 + 0.5*1i), (0.05 + (-0.6)*1i), (0.1 + (-0.5)*1i), (-0.77 + (-0.49)*1i), (-0.5 + (-0.3)*1i), (0.32 + (-1.16)*1i)})
			ct7 := cvdf([]complex128{(0.0 + 0.0*1i), (-0.06 + (-0.90)*1i), (0.65 + (-0.47)*1i), (-0.34 + (-1.22)*1i), (0.0 + 0.0*1i), (-0.06 + (-0.90)*1i), (-0.59 + (-1.46)*1i), (-1.04 + (-0.04)*1i), (0.0 + 0.0*1i), (-0.06 + (-0.90)*1i), (-0.83 + 0.59*1i), (0.07 + (-0.37)*1i), (0.0 + 0.0*1i), (-0.06 + (-0.90)*1i), (-0.76 + (-1.15)*1i), (-1.33 + (-1.82)*1i)})
			ct6 := cvdf([]complex128{(0.0 + 0.0*1i), (0.90 + 0.06*1i), (0.91 + (-0.77)*1i), (1.80 + (-0.10)*1i), (0.0 + 0.0*1i), (0.90 + 0.06*1i), (1.45 + 0.74*1i), (0.20 + 0.90*1i), (0.0 + 0.0*1i), (0.90 + 0.06*1i), (-0.55 + 0.23*1i), (0.83 + (-0.39)*1i), (0.0 + 0.0*1i), (0.90 + 0.06*1i), (1.04 + 0.79*1i), (1.95 + 1.22*1i)})
			ct10x := cvdf([]complex128{(0.7 + (-0.8)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.6 + (-0.6)*1i), (-0.9 + 0.5*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.6 + (-0.6)*1i), (-0.9 + 0.5*1i), (0.7 + (-0.6)*1i), (0.1 + (-0.5)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.7 + (-0.8)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.7 + (-0.6)*1i), (-0.4 + (-0.7)*1i), (0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.8 + (-0.7)*1i), (-0.4 + (-0.7)*1i), (-0.1 + (-0.2)*1i), (0.2 + (-0.8)*1i), (0.7 + (-0.6)*1i), (0.1 + 0.4*1i), (0.6 + (-0.6)*1i), (0.7 + (-0.8)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (-0.9 + 0.5*1i), (-0.4 + (-0.7)*1i), (0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.1 + (-0.5)*1i), (-0.4 + (-0.7)*1i), (0.7 + (-0.6)*1i), (0.2 + (-0.8)*1i), (-0.9 + 0.5*1i), (0.1 + 0.4*1i), (0.6 + (-0.6)*1i), (0.7 + (-0.8)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.6 + (-0.6)*1i), (0.7 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.6 + (-0.6)*1i), (0.7 + (-0.6)*1i), (-0.1 + (-0.2)*1i), (0.8 + (-0.7)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i)})
			ct10y := cvdf([]complex128{(0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.7 + (-0.8)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.7 + (-0.8)*1i), (-0.4 + (-0.7)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.7 + (-0.8)*1i), (-0.4 + (-0.7)*1i), (-0.1 + (-0.9)*1i), (0.2 + (-0.8)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.7 + (-0.8)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (-0.1 + (-0.9)*1i), (-0.9 + 0.5*1i), (0.7 + (-0.8)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (-0.6 + 0.6*1i), (-0.9 + 0.5*1i), (-0.9 + (-0.4)*1i), (0.1 + (-0.5)*1i), (-0.1 + (-0.9)*1i), (-0.5 + (-0.3)*1i), (0.7 + (-0.8)*1i), (0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.7 + (-0.8)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (-0.1 + (-0.9)*1i), (0.7 + (-0.8)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (-0.6 + 0.6*1i), (-0.9 + (-0.4)*1i), (-0.1 + (-0.9)*1i), (0.7 + (-0.8)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.6 + (-0.6)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.7 + (-0.8)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.7 + (-0.8)*1i), (-0.9 + 0.5*1i), (-0.4 + (-0.7)*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.7 + (-0.8)*1i), (-0.9 + 0.5*1i), (-0.4 + (-0.7)*1i), (0.1 + (-0.5)*1i), (-0.1 + (-0.9)*1i), (-0.5 + (-0.3)*1i), (0.2 + (-0.8)*1i)})
			csize1 := cvdf([]complex128{(0.0 + 0.0*1i), (0.9 + 0.9*1i), (1.63 + 1.73*1i), (2.90 + 2.78*1i)})
			csize3 := cvdf([]complex128{(0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (1.17 + 1.17*1i), (1.17 + 1.17*1i), (1.17 + 1.17*1i), (1.17 + 1.17*1i), (1.17 + 1.17*1i), (1.17 + 1.17*1i), (1.17 + 1.17*1i)})
			csize2 := cvdf([]complex128{(0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (0.0 + 0.0*1i), (1.54 + 1.54*1i), (1.54 + 1.54*1i), (1.54 + 1.54*1i), (1.54 + 1.54*1i), (1.54 + 1.54*1i), (1.54 + 1.54*1i), (1.54 + 1.54*1i)})

			for ki = 1; ki <= 4; ki++ {
				(*incx) = incxs[ki-1]
				(*incy) = incys[ki-1]
				mx = int(math.Abs(float64(*incx)))
				my = int(math.Abs(float64(*incy)))
				//
				for kn = 1; kn <= 4; kn++ {
					n = ns[kn-1]
					ksize = minint(2, kn)
					lenx = lens[kn-1+(mx-1)*2]
					leny = lens[kn-1+(my-1)*2]

					if (*icase) == 1 {
						//              .. ZDOTC ..
						cdot.Set(0, Zdotc(&n, cx1, incx, cy1, incy))
						zcompare(1, cdot, ct6.Off(kn-1+(ki-1)*4), csize1.Off(kn-1), sfac, t)
					} else if (*icase) == 2 {
						//              .. ZDOTU ..
						cdot.Set(0, Zdotu(&n, cx1, incx, cy1, incy))
						zcompare(1, cdot, ct7.Off(kn-1+(ki-1)*4), csize1.Off(kn-1), sfac, t)
					} else if (*icase) == 3 {
						//              .. ZAXPY ..
						Zaxpy(&n, &ca, cx1, incx, cy1, incy)
						zcompare(leny, cy1, ct8.Off(0+(kn-1+(ki-1)*4)*4), csize2.Off(0+(ksize-1)*2), sfac, t)
					} else if (*icase) == 4 {
						//              .. ZCOPY ..
						Zcopy(&n, cx1, incx, cy1, incy)
						zcompare(leny, cy1, ct10y.Off(0+(kn-1+(ki-1)*4)*4), csize3, 1.0, t)
					} else if (*icase) == 5 {
						//              .. ZSWAP ..
						Zswap(&n, cx1, incx, cy1, incy)
						zcompare(lenx, cx1, ct10x.Off(0+(kn-1+(ki-1)*4)*4), csize3, 1.0, t)
						zcompare(leny, cy1, ct10y.Off(0+(kn-1+(ki-1)*4)*4), csize3, 1.0, t)
					}

					*ntest++
				}
			}

			if *pass {
				passL1()
			}
		}
	}
}

func zcompare(len int, ccomp, ctrue, csize *mat.CVector, sfac float64, t *testing.T) {
	var i int

	scomp := vf(20)
	ssize := vf(20)
	strue := vf(20)

	for i = 1; i <= len; i++ {
		scomp.Set(2*i-1-1, real(ccomp.Get(i-1)))
		scomp.Set(2*i-1, imag(ccomp.Get(i-1)))
		strue.Set(2*i-1-1, real(ctrue.Get(i-1)))
		strue.Set(2*i-1, imag(ctrue.Get(i-1)))
		ssize.Set(2*i-1-1, real(csize.Get(i-1)))
		ssize.Set(2*i-1, imag(csize.Get(i-1)))
	}

	dcompare(2*len, scomp, strue, ssize, sfac, t)
	return
}
