package lin

import (
	"github.com/whipstein/golinalg/golapack"
	"github.com/whipstein/golinalg/golapack/gltest"
	"github.com/whipstein/golinalg/mat"
)

// drzt02 returns
//      || I - Q'*Q || / ( M * eps)
// where the matrix Q is defined by the Householder transformations
// generated by DTZRZF.
func drzt02(m, n int, af *mat.Matrix, tau, work *mat.Vector, lwork int) (drzt02Return float64) {
	var one, zero float64
	var i int
	var err error

	rwork := vf(1)

	zero = 0.0
	one = 1.0

	drzt02Return = zero

	if lwork < n*n+n {
		gltest.Xerbla("drzt02", 7)
		return
	}

	//     Quick return if possible
	if m <= 0 || n <= 0 {
		return
	}

	//     Q := I
	golapack.Dlaset(Full, n, n, zero, one, work.Matrix(n, opts))

	//     Q := P(1) * ... * P(m) * Q
	if err = golapack.Dormrz(Left, NoTrans, n, n, m, n-m, af, tau, work.Matrix(n, opts), work.Off(n*n), lwork-n*n); err != nil {
		panic(err)
	}

	//     Q := P(m) * ... * P(1) * Q
	if err = golapack.Dormrz(Left, Trans, n, n, m, n-m, af, tau, work.Matrix(n, opts), work.Off(n*n), lwork-n*n); err != nil {
		panic(err)
	}

	//     Q := Q - I
	for i = 1; i <= n; i++ {
		work.Set((i-1)*n+i-1, work.Get((i-1)*n+i-1)-one)
	}

	drzt02Return = golapack.Dlange('O', n, n, work.Matrix(n, opts), rwork) / (golapack.Dlamch(Epsilon) * float64(max(m, n)))
	return
}
