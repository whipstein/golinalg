package eig

import (
	"fmt"
	"golinalg/goblas"
	"golinalg/golapack"
	"math"
	"testing"
)

// Dchkgk tests DGGBAK, a routine for backward balancing  of
// a matrix pair (A, B).
func Dchkgk(t *testing.T) {
	var anorm, bnorm, eps, one, rmax, vmax, zero float64
	var _i, i, ihi, ilo, info, j, knt, lda, ldb, lde, ldf, ldvl, ldvr, ldwork, m, n, ninfo int

	lscale := vf(50)
	rscale := vf(50)
	lmax := make([]int, 4)
	a := mf(50, 50, opts)
	af := mf(50, 50, opts)
	b := mf(50, 50, opts)
	bf := mf(50, 50, opts)
	e := mf(50, 50, opts)
	f := mf(50, 50, opts)
	vl := mf(50, 50, opts)
	vlf := mf(50, 50, opts)
	vr := mf(50, 50, opts)
	vrf := mf(50, 50, opts)
	work := mf(50, 50, opts)

	lda = 50
	ldb = 50
	ldvl = 50
	ldvr = 50
	lde = 50
	ldf = 50
	ldwork = 50
	zero = 0.0
	one = 1.0

	nlist := []int{6, 6, 5, 6, 6, 7, 7, 6}
	mlist := []int{3, 3, 5, 5, 2, 3, 3, 2}
	alist := [][]float64{
		{
			0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.2000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.3000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.4000e+01, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.5000e+01, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.6000e+01,
		},
		{
			0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.2000e+01, 0.2100e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.3000e+01, 0.3100e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.4000e+01, 0.4100e+01, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.5000e+01, 0.5100e+01, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.6000e+01, 0.6100e+01,
		},
		{
			0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.1000e+01, 0.2000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.1000e+01, 0.2000e+01, 0.3000e+01, 0.0000e+00, 0.0000e+00,
			0.1000e+01, 0.2000e+01, 0.3000e+01, 0.4000e+01, 0.0000e+00,
			0.1000e+01, 0.2000e+01, 0.3000e+01, 0.4000e+01, 0.5000e+01,
		},
		{
			0.1000e+01, 0.1000e+11, 0.1000e+11, 0.1000e+11, 0.1000e+11, 0.1000e+11,
			0.1000e+01, 0.1000e+01, 0.1000e+11, 0.1000e+11, 0.1000e+11, 0.1000e+11,
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+11, 0.1000e+11, 0.1000e+11,
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+11, 0.1000e+11,
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+11,
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
		},
		{
			0.1000e+01, 0.0000e+00, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.1000e+01, 0.0000e+00, 0.0000e+00, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.1000e+07, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e-05, 0.1000e+07,
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.1000e+07, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e-05, 0.1000e-05,
			0.1000e+07, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e+07, 0.1000e+07,
		},
		{
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.0000e+00, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e+01,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
		},
		{
			0.0000e+00, 0.1000e+04, 0.0000e+00, 0.1000e+04, 0.1000e+04, 0.1000e+04, 0.1000e-04,
			0.0000e+00, 0.1000e-04, 0.1000e+04, 0.1000e-04, 0.1000e-04, 0.1000e+04, 0.1000e+04,
			0.1000e+04, 0.1000e+04, 0.1000e-04, 0.1000e+04, 0.1000e+04, 0.1000e+04, 0.1000e+04,
			0.0000e+00, 0.1000e-04, 0.0000e+00, 0.1000e+00, 0.1000e+04, 0.1000e-04, 0.1000e+04,
			0.0000e+00, 0.1000e+04, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.4000e-04, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e-04,
			0.0000e+00, 0.1000e+04, 0.0000e+00, 0.1000e+04, 0.1000e+04, 0.1000e-04, 0.1000e+04,
		},
		{
			-0.2000e+02, -0.1000e+05, -0.2000e+01, -0.1000e+07, -0.1000e+02, -0.2000e+06,
			0.6000e-02, 0.4000e+01, 0.6000e-03, 0.2000e+03, 0.3000e-02, 0.3000e+02,
			-0.2000e+00, -0.3000e+03, -0.4000e-01, -0.1000e+05, 0.0000e+00, 0.3000e+04,
			0.6000e-04, 0.4000e-01, 0.9000e-05, 0.9000e+01, 0.3000e-04, 0.5000e+00,
			0.6000e-01, 0.5000e+02, 0.8000e-02, -0.4000e+04, 0.8000e-01, 0.0000e+00,
			0.0000e+00, 0.1000e+04, 0.7000e+00, -0.2000e+06, 0.1300e+02, -0.6000e+05,
		},
	}
	blist := [][]float64{
		{
			0.6000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.5000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.4000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.3000e+01, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.2000e+01, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e+01,
		},
		{
			0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.2000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.3000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.4000e+01, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.5000e+01, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.6000e+01,
		},
		{
			0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.1000e+01, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e+01, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e+01,
		},
		{
			0.1000e+01, 0.1000e+11, 0.1000e+11, 0.1000e+11, 0.1000e+11, 0.1000e+11,
			0.1000e+01, 0.1000e+01, 0.1000e+11, 0.1000e+11, 0.1000e+11, 0.1000e+11,
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+11, 0.1000e+11, 0.1000e+11,
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+11, 0.1000e+11,
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+11,
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
		},
		{
			0.1000e+01, 0.0000e+00, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.1000e+01, 0.0000e+00, 0.0000e+00, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.1000e+07, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e-05, 0.1000e+07,
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.1000e+07, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e-05, 0.1000e-05,
			0.1000e+07, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e+07, 0.1000e+07,
		},
		{
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e+01,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
		},
		{
			0.0000e+00, 0.1000e-01, 0.0000e+00, 0.1000e+04, 0.1000e-04, 0.1000e+04, 0.1000e+04,
			0.0000e+00, 0.1000e+04, 0.1000e+04, 0.1000e+04, 0.1000e+04, 0.1000e+00, 0.1000e+04,
			0.1000e+04, 0.1000e+04, 0.1000e+04, 0.1000e+04, 0.1000e-04, 0.1000e+04, 0.1000e+04,
			0.0000e+00, 0.4000e-01, 0.0000e+00, 0.1000e+04, 0.1000e+01, 0.1000e+04, 0.1000e+04,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e+01,
			0.0000e+00, 0.1000e-04, 0.0000e+00, 0.1000e+04, 0.1000e+01, 0.1000e+01, 0.1000e-04,
		},
		{
			-0.2000e+02, -0.1000e+05, 0.2000e+01, -0.2000e+07, 0.1000e+02, -0.1000e+06,
			0.5000e-02, 0.3000e+01, -0.2000e-03, 0.4000e+03, -0.1000e-02, 0.3000e+02,
			0.0000e+00, -0.1000e+03, -0.8000e-01, 0.2000e+05, -0.4000e+00, 0.0000e+00,
			0.5000e-04, 0.3000e-01, 0.2000e-05, 0.4000e+01, 0.2000e-04, 0.1000e+00,
			0.4000e-01, 0.3000e+02, -0.1000e-02, 0.3000e+04, -0.1000e-01, 0.6000e+03,
			-0.1000e+01, 0.0000e+00, 0.4000e+00, -0.1000e+06, 0.4000e+01, 0.2000e+05,
		},
	}
	vllist := [][]float64{
		{
			0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.2000e+01, 0.2000e+01, 0.2000e+01,
			0.3000e+01, 0.3000e+01, 0.3000e+01,
			0.4000e+01, 0.4000e+01, 0.4000e+01,
			0.5000e+01, 0.5000e+01, 0.5000e+01,
			0.6000e+01, 0.6000e+01, 0.6000e+01,
		},
		{
			0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.2000e+01, 0.2000e+01, 0.2000e+01,
			0.3000e+01, 0.3000e+01, 0.3000e+01,
			0.4000e+01, 0.4000e+01, 0.4000e+01,
			0.5000e+01, 0.5000e+01, 0.5000e+01,
			0.6000e+01, 0.6000e+01, 0.6000e+01,
		},
		{
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.2000e+01, 0.2000e+01, 0.2000e+01, 0.2000e+01, 0.2000e+01,
			0.3000e+01, 0.3000e+01, 0.3000e+01, 0.3000e+01, 0.3000e+01,
			0.4000e+01, 0.4000e+01, 0.4000e+01, 0.4000e+01, 0.4000e+01,
			0.5000e+01, 0.5000e+01, 0.5000e+01, 0.5000e+01, 0.5000e+01,
		},
		{
			0.1000e+01, 0.2000e+01, -0.3000e+01, 0.4000e+01, 0.5000e+01,
			0.8000e+01, 0.9000e+01, 0.0000e+00, 0.9000e+01, 0.2000e+01,
			0.0000e+00, -0.9000e+01, 0.2000e+01, 0.1000e+01, 0.1000e+01,
			0.8000e+01, 0.2000e+01, 0.1000e+01, 0.0000e+00, 0.2000e+01,
			0.0000e+00, 0.3000e+01, 0.2000e+01, 0.1000e+01, 0.1000e+01,
			0.2000e+01, 0.1000e+01, 0.9000e+01, 0.0000e+00, 0.1000e+01,
		},
		{
			0.1000e+01, 0.1000e+01,
			0.2000e+01, 0.2000e+01,
			0.3000e+01, 0.3000e+01,
			0.4000e+01, 0.4000e+01,
			0.5000e+01, 0.5000e+01,
			0.6000e+01, 0.6000e+01,
		},
		{
			0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.2000e+01, 0.2000e+01, 0.2000e+01,
			0.3000e+01, 0.3000e+01, 0.3000e+01,
			0.4000e+01, 0.4000e+01, 0.4000e+01,
			0.5000e+01, 0.5000e+01, 0.5000e+01,
			0.6000e+01, 0.6000e+01, 0.6000e+01,
			0.7000e+01, 0.7000e+01, 0.7000e+01,
		},
		{
			0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.2000e+01, 0.2000e+01, 0.2000e+01,
			0.3000e+01, 0.3000e+01, 0.3000e+01,
			0.4000e+01, 0.4000e+01, 0.4000e+01,
			0.5000e+01, 0.5000e+01, 0.5000e+01,
			0.6000e+01, 0.6000e+01, 0.6000e+01,
			0.7000e+01, 0.7000e+01, 0.7000e+01,
		},
		{
			0.1000e+01, 0.1000e+01,
			0.2000e+01, 0.2000e+01,
			0.3000e+01, 0.3000e+01,
			0.4000e+01, 0.4000e+01,
			0.5000e+01, 0.5000e+01,
			0.6000e+01, 0.6000e+01,
		},
	}
	vrlist := [][]float64{
		{
			-0.1000e+01, -0.1000e+01, -0.1000e+01,
			-0.2000e+01, -0.2000e+01, -0.2000e+01,
			-0.3000e+01, -0.3000e+01, -0.3000e+01,
			-0.4000e+01, -0.4000e+01, -0.4000e+01,
			-0.5000e+01, -0.5000e+01, -0.5000e+01,
			-0.6000e+01, -0.6000e+01, -0.6000e+01,
		},
		{
			-0.1000e+01, -0.1000e+01, -0.1000e+01,
			-0.2000e+01, -0.2000e+01, -0.2000e+01,
			-0.3000e+01, -0.3000e+01, -0.3000e+01,
			-0.4000e+01, -0.4000e+01, -0.4000e+01,
			-0.5000e+01, -0.5000e+01, -0.5000e+01,
			-0.6000e+01, -0.6000e+01, -0.6000e+01,
		},
		{
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.2000e+01, 0.2000e+01, 0.2000e+01, 0.2000e+01, 0.2000e+01,
			0.3000e+01, 0.3000e+01, 0.3000e+01, 0.3000e+01, 0.3000e+01,
			0.4000e+01, 0.4000e+01, 0.4000e+01, 0.4000e+01, 0.4000e+01,
			0.5000e+01, 0.5000e+01, 0.5000e+01, 0.5000e+01, 0.5000e+01,
		},
		{
			0.1000e+01, -0.2000e+01, 0.3000e+01, 0.4000e+01, 0.5000e+01,
			-0.8000e+01, 0.9000e+01, 0.0000e+00, 0.9000e+01, 0.2000e+01,
			0.0000e+00, 0.9000e+01, 0.2000e+01, 0.1000e+01, 0.1000e+01,
			0.8000e+01, 0.2000e+01, 0.1000e+01, 0.0000e+00, 0.2000e+01,
			0.0000e+00, 0.3000e+01, 0.2000e+01, 0.1000e+01, 0.1000e+01,
			0.2000e+01, 0.8000e+01, 0.9000e+01, 0.0000e+00, 0.1000e+01,
		},
		{
			0.1100e+01, 0.1100e+01,
			0.2200e+01, 0.2200e+01,
			0.3300e+01, 0.3300e+01,
			0.4400e+01, 0.4400e+01,
			0.5500e+01, 0.5500e+01,
			0.6600e+01, 0.6600e+01,
		},
		{
			-0.1000e+01, -0.1000e+01, -0.1000e+01,
			-0.2000e+01, -0.2000e+01, -0.2000e+01,
			-0.3000e+01, -0.3000e+01, -0.3000e+01,
			-0.4000e+01, -0.4000e+01, -0.4000e+01,
			-0.5000e+01, -0.5000e+01, -0.5000e+01,
			-0.6000e+01, -0.6000e+01, -0.6000e+01,
			-0.7000e+01, -0.7000e+01, -0.7000e+01,
		},
		{
			0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.2000e+01, 0.2000e+01, 0.2000e+01,
			0.3000e+01, 0.3000e+01, 0.3000e+01,
			0.4000e+01, 0.4000e+01, 0.4000e+01,
			0.5000e+01, 0.5000e+01, 0.5000e+01,
			0.6000e+01, 0.6000e+01, 0.6000e+01,
			0.7000e+01, 0.7000e+01, 0.7000e+01,
		},
		{
			0.1000e+02, 0.1000e+02,
			0.2000e+02, 0.2000e+02,
			0.3000e+02, 0.3000e+02,
			0.4000e+02, 0.4000e+02,
			0.5000e+02, 0.5000e+02,
			0.6000e+02, 0.6000e+02,
		},
	}

	//     Initialization
	lmax[0] = 0
	lmax[1] = 0
	lmax[2] = 0
	lmax[3] = 0
	ninfo = 0
	knt = 0
	rmax = zero

	eps = golapack.Dlamch(Precision)

	for _i, n = range nlist {
		m = mlist[_i]

		for i = 1; i <= n; i++ {
			for j = 1; j <= n; j++ {
				a.Set(i-1, j-1, alist[_i][(i-1)*(n)+j-1])
			}
		}

		for i = 1; i <= n; i++ {
			for j = 1; j <= n; j++ {
				b.Set(i-1, j-1, blist[_i][(i-1)*(n)+j-1])
			}
		}

		for i = 1; i <= n; i++ {
			for j = 1; j <= m; j++ {
				vl.Set(i-1, j-1, vllist[_i][(i-1)*(m)+j-1])
			}
		}

		for i = 1; i <= n; i++ {
			for j = 1; j <= m; j++ {
				vr.Set(i-1, j-1, vrlist[_i][(i-1)*(m)+j-1])
			}
		}

		knt = knt + 1

		anorm = golapack.Dlange('M', &n, &n, a, &lda, work.VectorIdx(0))
		bnorm = golapack.Dlange('M', &n, &n, b, &ldb, work.VectorIdx(0))

		golapack.Dlacpy('F', &n, &n, a, &lda, af, &lda)
		golapack.Dlacpy('F', &n, &n, b, &ldb, bf, &ldb)

		golapack.Dggbal('B', &n, a, &lda, b, &ldb, &ilo, &ihi, lscale, rscale, work.VectorIdx(0), &info)
		if info != 0 {
			t.Fail()
			ninfo = ninfo + 1
			lmax[0] = knt
		}

		golapack.Dlacpy('F', &n, &m, vl, &ldvl, vlf, &ldvl)
		golapack.Dlacpy('F', &n, &m, vr, &ldvr, vrf, &ldvr)

		golapack.Dggbak('B', 'L', &n, &ilo, &ihi, lscale, rscale, &m, vl, &ldvl, &info)
		if info != 0 {
			t.Fail()
			ninfo = ninfo + 1
			lmax[1] = knt
		}

		golapack.Dggbak('B', 'R', &n, &ilo, &ihi, lscale, rscale, &m, vr, &ldvr, &info)
		if info != 0 {
			t.Fail()
			ninfo = ninfo + 1
			lmax[2] = knt
		}

		//     Test of DGGBAK
		//
		//     Check tilde(VL)'*A*tilde(VR) - VL'*tilde(A)*VR
		//     where tilde(A) denotes the transformed matrix.
		goblas.Dgemm(NoTrans, NoTrans, &n, &m, &n, &one, af, &lda, vr, &ldvr, &zero, work, &ldwork)
		goblas.Dgemm(Trans, NoTrans, &m, &m, &n, &one, vl, &ldvl, work, &ldwork, &zero, e, &lde)

		goblas.Dgemm(NoTrans, NoTrans, &n, &m, &n, &one, a, &lda, vrf, &ldvr, &zero, work, &ldwork)
		goblas.Dgemm(Trans, NoTrans, &m, &m, &n, &one, vlf, &ldvl, work, &ldwork, &zero, f, &ldf)

		vmax = zero
		for j = 1; j <= m; j++ {
			for i = 1; i <= m; i++ {
				vmax = maxf64(vmax, math.Abs(e.Get(i-1, j-1)-f.Get(i-1, j-1)))
			}
		}
		vmax = vmax / (eps * maxf64(anorm, bnorm))
		if vmax > rmax {
			lmax[3] = knt
			rmax = vmax
		}

		//     Check tilde(VL)'*B*tilde(VR) - VL'*tilde(B)*VR
		goblas.Dgemm(NoTrans, NoTrans, &n, &m, &n, &one, bf, &ldb, vr, &ldvr, &zero, work, &ldwork)
		goblas.Dgemm(Trans, NoTrans, &m, &m, &n, &one, vl, &ldvl, work, &ldwork, &zero, e, &lde)

		goblas.Dgemm(NoTrans, NoTrans, &n, &m, &n, &one, b, &ldb, vrf, &ldvr, &zero, work, &ldwork)
		goblas.Dgemm(Trans, NoTrans, &m, &m, &n, &one, vlf, &ldvl, work, &ldwork, &zero, f, &ldf)

		vmax = zero
		for j = 1; j <= m; j++ {
			for i = 1; i <= m; i++ {
				vmax = maxf64(vmax, math.Abs(e.Get(i-1, j-1)-f.Get(i-1, j-1)))
			}
		}
		vmax = vmax / (eps * maxf64(anorm, bnorm))
		if vmax > rmax {
			lmax[3] = knt
			rmax = vmax
		}

	}

	fmt.Printf(" .. test output of DGGBAK .. \n")

	fmt.Printf(" value of largest test error                  =%12.3E\n", rmax)
	fmt.Printf(" example number where DGGBAL info is not 0    =%4d\n", lmax[0])
	fmt.Printf(" example number where DGGBAK(L) info is not 0 =%4d\n", lmax[1])
	fmt.Printf(" example number where DGGBAK(R) info is not 0 =%4d\n", lmax[2])
	fmt.Printf(" example number having largest error          =%4d\n", lmax[3])
	fmt.Printf(" number of examples where info is not 0       =%4d\n", ninfo)
	fmt.Printf(" total number of examples tested              =%4d\n", knt)
}
