package eig

import (
	"math"

	"github.com/whipstein/golinalg/golapack"
)

// Dget36 tests DTREXC, a routine for moving blocks (either 1 by 1 or
// 2 by 2) on the diagonal of a matrix in real Schur form.  Thus, DLAEXC
// computes an orthogonal matrix Q such that
//
//    Q' * T1 * Q  = T2
//
// and where one of the diagonal blocks of T1 (the one at row IFST) has
// been moved to position ILST.
//
// The test code verifies that the residual Q'*T1*Q-T2 is small, that T2
// is in Schur form, and that the final position of the IFST block is
// ILST (within +-1).
//
// The test matrices are read from a file with logical unit number NIN.
func Dget36(rmax *float64, lmax *int, ninfo *[]int, knt *int) {
	var eps, one, res, zero float64
	var _i, i, ifst, ifst1, ifst2, ifstsv, ilst, ilst1, ilst2, ilstsv, info1, info2, j, ldt, loc, lwork, n int

	zero = 0.0
	one = 1.0
	ldt = 10
	lwork = 2 * ldt * ldt
	result := vf(2)
	work := vf(lwork)
	q := mf(10, 10, opts)
	t1 := mf(10, 10, opts)
	t2 := mf(10, 10, opts)
	tmp := mf(10, 10, opts)

	eps = golapack.Dlamch(Precision)
	(*rmax) = zero
	(*lmax) = 0
	(*knt) = 0
	(*ninfo)[0] = 0
	(*ninfo)[1] = 0
	(*ninfo)[2] = 0

	nlist := []int{8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8}
	ifstlist := []int{2, 7, 1, 8, 2, 2, 2, 1, 1, 7, 7, 7, 7, 8}
	ilstlist := []int{7, 2, 7, 2, 7, 7, 7, 7, 7, 2, 2, 2, 1, 1}
	tmplist := [][]float64{
		{
			1.0e+00, 1.0e+00, 1.1e+00, 1.3e+00, 2.0e+00, 3.0e+00, -4.7e+00, 3.3e+00,
			-1.0e+00, 1.0e+00, 3.7e+00, 7.9e+00, 4.0e+00, 5.3e+00, 3.3e+00, -9.0e-01,
			0.0e+00, 0.0e+00, 2.0e+00, -3.0e+00, 3.4e+00, 6.5e+00, 5.2e+00, 1.8e+00,
			0.0e+00, 0.0e+00, 4.0e+00, 2.0e+00, -5.3e+00, -8.9e+00, -2.0e-01, -5.0e-01,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 4.2e+00, 2.0e+00, 3.3e+00, 2.3e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -3.7e+00, 4.2e+00, 9.9e+00, 8.8e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 9.9e+00, 8.8e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -9.9e+00, 9.9e+00,
		},
		{
			1.0e+00, 1.0e+00, 1.1e+00, 1.3e+00, 2.0e+00, 3.0e+00, -4.7e+00, 3.3e+00,
			-1.0e+00, 1.0e+00, 3.7e+00, 7.9e+00, 4.0e+00, 5.3e+00, 3.3e+00, -9.0e-01,
			0.0e+00, 0.0e+00, 2.0e+00, -3.0e+00, 3.4e+00, 6.5e+00, 5.2e+00, 1.8e+00,
			0.0e+00, 0.0e+00, 4.0e+00, 2.0e+00, -5.3e+00, -8.9e+00, -2.0e-01, -5.0e-01,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 4.2e+00, 2.0e+00, 3.3e+00, 2.3e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -3.7e+00, 4.2e+00, 9.9e+00, 8.8e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 9.9e+00, 8.8e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -9.9e+00, 9.9e+00,
		},
		{
			1.0e+00, 1.0e+00, 1.1e+00, 1.3e+00, 2.0e+00, 3.0e+00, -4.7e+00, 3.3e+00,
			0.0e+00, 1.0e+00, 3.7e+00, 7.9e+00, 4.0e+00, 5.3e+00, 3.3e+00, -9.0e-01,
			0.0e+00, 0.0e+00, 2.0e+00, -3.0e+00, 3.4e+00, 6.5e+00, 5.2e+00, 1.8e+00,
			0.0e+00, 0.0e+00, 4.0e+00, 2.0e+00, -5.3e+00, -8.9e+00, -2.0e-01, -5.0e-01,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 4.2e+00, 2.0e+00, 3.3e+00, 2.3e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 4.2e+00, 9.9e+00, 8.8e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 9.9e+00, 8.8e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -9.9e+00, 9.9e+00,
		},
		{
			1.0e+00, 1.0e+00, 1.1e+00, 1.3e+00, 2.0e+00, 3.0e+00, -4.7e+00, 3.3e+00,
			-1.1e+00, 1.0e+00, 3.7e+00, 7.9e+00, 4.0e+00, 5.3e+00, 3.3e+00, -9.0e-01,
			0.0e+00, 0.0e+00, 2.0e+00, -3.0e+00, 3.4e+00, 6.5e+00, 5.2e+00, 1.8e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 2.0e+00, -5.3e+00, -8.9e+00, -2.0e-01, -5.0e-01,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 4.2e+00, 2.0e+00, 3.3e+00, 2.3e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -3.7e+00, 4.2e+00, 9.9e+00, 8.8e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 9.9e+00, 8.8e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 9.9e+00,
		},
		{
			1.1e+00, 1.0e-16, 2.7e+00, 3.3e+00, 2.3e+00, 3.4e+00, 5.6e+00,
			-1.0e-16, 1.1e+00, 4.2e+00, 5.1e+00, -1.0e-01, -2.0e-01, -3.0e-01,
			0.0e+00, 0.0e+00, 2.3e+00, 1.0e+00, 1.0e+02, 1.0e+03, 1.0e+02,
			0.0e+00, 0.0e+00, 0.0e+00, 3.9e+00, 3.2e+00, 6.5e+00, 3.2e+00,
			0.0e+00, 0.0e+00, 0.0e+00, -9.0e-01, 3.9e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -9.0e-01, 6.3e+00,
		},
		{
			1.1e+00, 1.0e-16, 2.7e+00, 3.3e+00, 2.3e+00, 3.4e+00, 5.6e+00,
			-1.0e-16, 1.1e+00, 4.2e+00, 5.1e+00, -1.0e-01, -2.0e-01, -3.0e-01,
			0.0e+00, 0.0e+00, 2.3e+00, 1.0e+00, 1.0e+02, 1.0e+03, 1.0e+02,
			0.0e+00, 0.0e+00, 0.0e+00, 3.9e+00, 3.2e-15, 6.5e+00, 3.2e+00,
			0.0e+00, 0.0e+00, 0.0e+00, -9.0e-16, 3.9e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 6.4e+00,
		},
		{
			1.1e+00, 1.0e-16, 2.7e+00, 3.3e+00, 2.3e+00, 3.4e+00, 5.6e+00,
			-1.0e-16, 1.1e+00, 4.2e+00, 5.1e+00, -1.0e-01, -2.0e-01, -3.0e-01,
			0.0e+00, 0.0e+00, 2.3e+00, 1.0e+00, 1.0e+02, 1.0e+03, 1.0e+02,
			0.0e+00, 0.0e+00, 0.0e+00, 3.9e+00, 3.2e-15, 6.5e+00, 3.2e+00,
			0.0e+00, 0.0e+00, 0.0e+00, -9.0e-16, 3.9e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -9.0e-21, 6.3e+00,
		},
		{
			1.1e+00, 1.0e-16, 2.7e+00, 3.3e+00, 2.3e+00, 3.4e+00, 5.6e+00,
			0.0e+00, 1.1e+00, 4.2e+00, 5.1e+00, -1.0e-01, -2.0e-01, -3.0e-01,
			0.0e+00, 0.0e+00, 2.3e+00, 1.0e+00, 1.0e+02, 1.0e+03, 1.0e+02,
			0.0e+00, 0.0e+00, 0.0e+00, 3.9e+00, 3.2e-15, 6.5e+00, 3.2e+00,
			0.0e+00, 0.0e+00, 0.0e+00, -9.0e-16, 3.9e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -9.0e-21, 6.3e+00,
		},
		{
			1.1e+00, -1.1e+00, 2.7e+00, 3.3e+00, 2.3e+00, 3.4e+00, 5.6e+00,
			2.3e+00, 1.1e+00, 4.2e+00, 5.1e+00, -1.0e-01, -2.0e-01, -3.0e-01,
			0.0e+00, 0.0e+00, 2.3e+00, 1.0e+00, 1.0e+02, 1.0e+03, 1.0e+02,
			0.0e+00, 0.0e+00, 0.0e+00, 3.9e+00, 3.2e+00, 6.5e+00, 3.2e+00,
			0.0e+00, 0.0e+00, 0.0e+00, -9.0e-21, 3.9e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 6.3e+00, 3.0e-20,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -9.0e-21, 6.3e+00,
		},
		{
			6.3e+00, 3.0e+00, 2.7e+00, 3.3e+00, 2.3e+00, 3.4e+00, 5.6e+00,
			-9.0e-01, 6.3e+00, 4.2e+00, 5.1e+00, -1.0e-01, -2.0e-01, -3.0e-01,
			0.0e+00, 0.0e+00, 2.3e+00, 1.0e+00, 1.0e+02, 1.0e+03, 1.0e+02,
			0.0e+00, 0.0e+00, 0.0e+00, 3.9e+00, 3.2e+00, 6.5e+00, 3.2e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 3.8e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 1.1e+00, 1.4e-20,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -1.6e-20, 1.1e+00,
		},
		{
			6.3e+00, 3.0e+00, 2.7e+00, 3.3e+00, 2.3e+00, 3.4e+00, 5.6e+00,
			-9.0e-01, 6.3e+00, 4.2e+00, 5.1e+00, -1.0e-01, -2.0e-01, -3.0e-01,
			0.0e+00, 0.0e+00, 2.3e+00, 1.0e+00, 1.0e+02, 1.0e+03, 1.0e+02,
			0.0e+00, 0.0e+00, 0.0e+00, 3.9e+00, 3.2e+00, 6.5e+00, 3.2e+00,
			0.0e+00, 0.0e+00, 0.0e+00, -9.0e-01, 3.9e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 1.1e+00, 1.4e-20,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -1.6e-20, 1.1e+00,
		},
		{
			1.1e+00, 1.0e-16, 2.7e+00, 3.3e+00, 2.3e+00, 3.4e+00, 5.6e+00,
			-1.0e-16, 1.1e+00, 4.2e+00, 5.1e+00, -1.0e-01, -2.0e-01, -3.0e-01,
			0.0e+00, 0.0e+00, 2.3e+00, 1.0e+00, 1.0e+02, 1.0e+03, 1.0e+02,
			0.0e+00, 0.0e+00, 0.0e+00, 3.9e+00, 3.2e-15, 6.5e+00, 3.2e+00,
			0.0e+00, 0.0e+00, 0.0e+00, -9.0e-16, 3.9e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -9.0e-21, 6.3e+00,
		},
		{
			1.1e+00, 1.0e-16, 2.7e+06, 3.3e+00, 2.3e+00, 3.4e+00, 5.6e+00,
			0.0e+00, 1.1e+00, 4.2e+06, 5.1e+00, -1.0e-01, -2.0e-01, -3.0e-01,
			0.0e+00, 0.0e+00, 2.3e+00, 1.0e+07, 1.0e+08, 1.0e+03, 1.0e+02,
			0.0e+00, 0.0e+00, 0.0e+00, 3.9e+00, 3.2e-15, 6.5e+04, 3.2e+00,
			0.0e+00, 0.0e+00, 0.0e+00, -9.0e-16, 3.9e+00, 6.3e+03, 3.0e+05,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 6.3e+00, 3.0e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -9.0e-21, 6.3e+00,
		},
		{
			1.1e+00, -1.0e-16, 2.7e+06, 2.3e+04, 3.3e+00, 2.3e+00, 3.4e+00, 5.6e+00,
			1.0e-16, 1.1e+00, 4.2e+06, -1.0e-01, 5.1e+00, -1.0e-01, -2.0e-01, -3.0e-01,
			0.0e+00, 0.0e+00, 2.3e+00, 1.1e-16, 1.0e+07, 1.0e+08, 1.0e+03, 1.0e+02,
			0.0e+00, 0.0e+00, -1.1e-13, 2.3e+00, 1.0e+07, 1.0e+08, 1.0e+03, 1.0e+02,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 3.9e+00, 3.2e-15, 6.5e+04, 3.2e+00,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -9.0e-16, 3.9e+00, 6.3e+03, 3.0e+05,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 6.3e+00, 3.0e-20,
			0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, 0.0e+00, -9.0e-21, 6.3e+00,
		},
	}

	//     Read input data until N=0
	for _i, n = range nlist {
		ifst = ifstlist[_i]
		ilst = ilstlist[_i]
		(*knt) = (*knt) + 1
		for i = 1; i <= n; i++ {
			for j = 1; j <= n; j++ {
				tmp.Set(i-1, j-1, tmplist[_i][(i-1)*(n)+j-1])
			}
		}
		golapack.Dlacpy('F', &n, &n, tmp, &ldt, t1, &ldt)
		golapack.Dlacpy('F', &n, &n, tmp, &ldt, t2, &ldt)
		ifstsv = ifst
		ilstsv = ilst
		ifst1 = ifst
		ilst1 = ilst
		ifst2 = ifst
		ilst2 = ilst
		res = zero

		//     Test without accumulating Q
		golapack.Dlaset('F', &n, &n, &zero, &one, q, &ldt)
		golapack.Dtrexc('N', &n, t1, &ldt, q, &ldt, &ifst1, &ilst1, work, &info1)
		for i = 1; i <= n; i++ {
			for j = 1; j <= n; j++ {
				if i == j && q.Get(i-1, j-1) != one {
					res = res + one/eps
				}
				if i != j && q.Get(i-1, j-1) != zero {
					res = res + one/eps
				}
			}
		}

		//     Test with accumulating Q
		golapack.Dlaset('F', &n, &n, &zero, &one, q, &ldt)
		golapack.Dtrexc('V', &n, t2, &ldt, q, &ldt, &ifst2, &ilst2, work, &info2)

		//     Compare T1 with T2
		for i = 1; i <= n; i++ {
			for j = 1; j <= n; j++ {
				if t1.Get(i-1, j-1) != t2.Get(i-1, j-1) {
					res = res + one/eps
				}
			}
		}
		if ifst1 != ifst2 {
			res = res + one/eps
		}
		if ilst1 != ilst2 {
			res = res + one/eps
		}
		if info1 != info2 {
			res = res + one/eps
		}

		//     Test for successful reordering of T2
		if info2 != 0 {
			(*ninfo)[info2-1] = (*ninfo)[info2-1] + 1
		} else {
			if int(math.Abs(float64(ifst2-ifstsv))) > 1 {
				res = res + one/eps
			}
			if int(math.Abs(float64(ilst2-ilstsv))) > 1 {
				res = res + one/eps
			}
		}

		//     Test for small residual, and orthogonality of Q
		Dhst01(&n, func() *int { y := 1; return &y }(), &n, tmp, &ldt, t2, &ldt, q, &ldt, work, &lwork, result)
		res = res + result.Get(0) + result.Get(1)

		//     Test for T2 being in Schur form
		loc = 1
	label70:
		;
		if t2.Get(loc+1-1, loc-1) != zero {
			//        2 by 2 block
			if t2.Get(loc-1, loc+1-1) == zero || t2.Get(loc-1, loc-1) != t2.Get(loc+1-1, loc+1-1) || math.Copysign(one, t2.Get(loc-1, loc+1-1)) == math.Copysign(one, t2.Get(loc+1-1, loc-1)) {
				res = res + one/eps
			}
			for i = loc + 2; i <= n; i++ {
				if t2.Get(i-1, loc-1) != zero {
					res = res + one/res
				}
				if t2.Get(i-1, loc+1-1) != zero {
					res = res + one/res
				}
			}
			loc = loc + 2
		} else {
			//        1 by 1 block
			for i = loc + 1; i <= n; i++ {
				if t2.Get(i-1, loc-1) != zero {
					res = res + one/res
				}
			}
			loc = loc + 1
		}
		if loc < n {
			goto label70
		}
		if res > (*rmax) {
			(*rmax) = res
			(*lmax) = (*knt)
		}
	}
}
