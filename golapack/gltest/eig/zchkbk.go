package eig

import (
	"fmt"
	"testing"

	"github.com/whipstein/golinalg/golapack"
)

// Zchkbk tests ZGEBAK, a routine for backward transformation of
// the computed right or left eigenvectors if the original matrix
// was preprocessed by balance subroutine ZGEBAL.
func Zchkbk(t *testing.T) {
	var eps, rmax, safmin, vmax, x, zero float64
	var _i, i, ihi, ilo, info, j, knt, lde, n, ninfo int
	scale := vf(20)
	lmax := make([]int, 2)
	e := cmf(20, 20, opts)
	ein := cmf(20, 20, opts)

	lde = 20
	zero = 0.0

	lmax[0] = 0
	lmax[1] = 0
	ninfo = 0
	knt = 0
	rmax = zero
	eps = golapack.Dlamch(Epsilon)
	safmin = golapack.Dlamch(SafeMinimum)

	nlist := []int{5, 5, 5, 6, 5, 6, 7}
	ilolist := []int{1, 1, 1, 4, 1, 2, 2}
	ihilist := []int{1, 1, 1, 6, 5, 5, 5}
	scalelist := [][]float64{
		{0.1000e+01, 0.2000e+01, 0.3000e+01, 0.4000e+01, 0.5000e+01},
		{0.1000e+01, 0.2000e+01, 0.3000e+01, 0.2000e+01, 0.1000e+01},
		{0.1000e+01, 0.2000e+01, 0.3000e+01, 0.2000e+01, 0.1000e+01},
		{0.4000e+01, 0.3000e+01, 0.5000e+01, 0.1000e+03, 0.1000e+00, 0.1000e+01},
		{0.1000e+03, 0.1000e+00, 0.1000e-01, 0.1000e+01, 0.1000e+02},
		{0.3000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.4000e+01},
		{0.3000e+01, 0.1000e-02, 0.1000e-01, 0.1000e+02, 0.1000e+00, 0.1000e+01, 0.6000e+01},
	}
	elist := [][]complex128{
		{
			0.10000e+01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i,
		},
		{
			0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, -.66667e+00 + 0.00000e+00i, -.41667e-01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, -.25000e+00 + 0.00000e+00i, -.66667e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.16667e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.22222e+00 + 0.00000e+00i, -.10000e+01 + 0.00000e+00i, -.50000e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.50000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.10000e+01 + 0.00000e+00i,
		},
		{
			0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, -.60000e-17 + 0.00000e+00i, -.60000e-17 + 0.00000e+00i, -.60000e-17 + 0.00000e+00i, -.60000e-17 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.36000e-34 + 0.00000e+00i, 0.36000e-34 + 0.00000e+00i, 0.36000e-34 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i,
		},
		{
			0.10000e+01 + 0.00000e+00i, 0.13356e-05 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.30007e-10 + 0.00000e+00i, -.32523e-04 + 0.00000e+00i, 0.13050e-01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.83300e-02 + 0.00000e+00i, 0.89289e-09 + 0.00000e+00i, -.67123e-04 + 0.00000e+00i, 0.66874e-04 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.44554e-05 + 0.00000e+00i, -.33550e-02 + 0.00000e+00i, 0.33448e-02 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.44554e-06 + 0.00000e+00i, -.33561e-01 + 0.00000e+00i, 0.33437e-01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.44113e-09 + 0.00000e+00i, 0.10115e+00 + 0.00000e+00i, 0.10084e+00 + 0.00000e+00i,
		},
		{
			0.13663e-03 + 0.00000e+00i, -.68290e-04 + 0.00000e+00i, 0.12516e-03 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.19503e-14 + 0.00000e+00i,
			0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, -.27756e-16 + 0.00000e+00i, 0.36012e-05 + 0.00000e+00i, -.60728e-17 + 0.00000e+00i,
			0.27355e+00 + 0.00000e+00i, -.13627e+00 + 0.00000e+00i, 0.25030e+00 + 0.00000e+00i, -.33221e-05 + 0.00000e+00i, -.20000e-02 + 0.00000e+00i,
			0.69088e-02 + 0.00000e+00i, -.34434e-02 + 0.00000e+00i, 0.61959e-02 + 0.00000e+00i, 0.16661e-01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i,
			0.38988e+00 + 0.00000e+00i, -.20327e+00 + 0.00000e+00i, -.34200e+00 + 0.00000e+00i, -.10000e-02 + 0.00000e+00i, 0.60004e-14 + 0.00000e+00i,
		},
		{
			0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.27764e-15 + 0.00000e+00i, -.24046e-16 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.75000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.85197e-01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.15196e-16 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.75000e+00 + 0.00000e+00i, -.80934e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.15196e-16 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.75000e+00 + 0.00000e+00i, -.95328e-01 + 0.00000e+00i, -.54260e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, -.15196e-16 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.75000e+00 + 0.00000e+00i, -.95328e-01 + 0.00000e+00i, -.54260e+00 + 0.00000e+00i, -.10000e+01 + 0.00000e+00i, -.15196e-16 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.45588e-16 + 0.00000e+00i,
		},
		{
			0.10000e+01 + 0.00000e+00i, -.11048e-01 + 0.00000e+00i, 0.37942e-01 + 0.00000e+00i, -.93781e-01 + 0.00000e+00i, -.34815e-01 + 0.00000e+00i, 0.44651e+00 + 0.00000e+00i, -.36016e-01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, -.45564e+00 + 0.00000e+00i, -.45447e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.46394e+00 + 0.00000e+00i, -.65116e+00 + 0.00000e+00i, 0.47808e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, -.27336e+00 + 0.00000e+00i, -.79459e+00 + 0.00000e+00i, 0.63028e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, -.62791e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, -.69389e-17 + 0.00000e+00i, 0.42585e-01 + 0.00000e+00i, -.64954e+00 + 0.00000e+00i, -.55814e+00 + 0.00000e+00i, -.64516e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, -.39041e+00 + 0.00000e+00i, -.40294e+00 + 0.00000e+00i, -.16849e+00 + 0.00000e+00i, -.94294e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, -.93714e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.25581e+00 + 0.00000e+00i, 0.33085e-03 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.19851e-02 + 0.00000e+00i,
		},
	}
	einlist := [][]complex128{
		{
			0.10000e+01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i,
		},
		{
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.10000e+01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.50000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.22222e+00 + 0.00000e+00i, -.10000e+01 + 0.00000e+00i, -.50000e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, -.25000e+00 + 0.00000e+00i, -.66667e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.16667e+00 + 0.00000e+00i,
			0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, -.66667e+00 + 0.00000e+00i, -.41667e-01 + 0.00000e+00i,
		},
		{
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.36000e-34 + 0.00000e+00i, 0.36000e-34 + 0.00000e+00i, 0.36000e-34 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, -.60000e-17 + 0.00000e+00i, -.60000e-17 + 0.00000e+00i, -.60000e-17 + 0.00000e+00i, -.60000e-17 + 0.00000e+00i,
			0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i,
		},
		{
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.44554e-03 + 0.00000e+00i, -.33550e+00 + 0.00000e+00i, 0.33448e+00 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.44554e-07 + 0.00000e+00i, -.33561e-02 + 0.00000e+00i, 0.33437e-02 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.30007e-10 + 0.00000e+00i, -.32523e-04 + 0.00000e+00i, 0.13050e-01 + 0.00000e+00i,
			0.10000e+01 + 0.00000e+00i, 0.13356e-05 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.83300e-02 + 0.00000e+00i, 0.89289e-09 + 0.00000e+00i, -.67123e-04 + 0.00000e+00i, 0.66874e-04 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.44113e-09 + 0.00000e+00i, 0.10115e+00 + 0.00000e+00i, 0.10084e+00 + 0.00000e+00i,
		},
		{
			0.13663e-01 + 0.00000e+00i, -.68290e-02 + 0.00000e+00i, 0.12516e-01 + 0.00000e+00i, 0.10000e+03 + 0.00000e+00i, 0.19503e-12 + 0.00000e+00i,
			0.10000e+00 + 0.00000e+00i, 0.10000e+00 + 0.00000e+00i, -.27756e-17 + 0.00000e+00i, 0.36012e-06 + 0.00000e+00i, -.60728e-18 + 0.00000e+00i,
			0.27355e-02 + 0.00000e+00i, -.13627e-02 + 0.00000e+00i, 0.25030e-02 + 0.00000e+00i, -.33221e-07 + 0.00000e+00i, -.20000e-04 + 0.00000e+00i,
			0.69088e-02 + 0.00000e+00i, -.34434e-02 + 0.00000e+00i, 0.61959e-02 + 0.00000e+00i, 0.16661e-01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i,
			0.38988e+01 + 0.00000e+00i, -.20327e+01 + 0.00000e+00i, -.34200e+01 + 0.00000e+00i, -.10000e-01 + 0.00000e+00i, 0.60004e-13 + 0.00000e+00i,
		},
		{
			0.00000e+00 + 0.00000e+00i, 0.75000e+00 + 0.00000e+00i, -.80934e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.15196e-16 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.75000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.85197e-01 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.15196e-16 + 0.00000e+00i,
			0.10000e+01 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, 0.27764e-15 + 0.00000e+00i, -.24046e-16 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.45588e-16 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.75000e+00 + 0.00000e+00i, -.95328e-01 + 0.00000e+00i, -.54260e+00 + 0.00000e+00i, -.10000e+01 + 0.00000e+00i, -.15196e-16 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.75000e+00 + 0.00000e+00i, -.95328e-01 + 0.00000e+00i, -.54260e+00 + 0.00000e+00i, 0.10000e+01 + 0.00000e+00i, -.15196e-16 + 0.00000e+00i,
		},
		{
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.25581e+00 + 0.00000e+00i, 0.33085e-03 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, -.45564e-03 + 0.00000e+00i, -.45447e-03 + 0.00000e+00i, 0.10000e-02 + 0.00000e+00i, 0.46394e-03 + 0.00000e+00i, -.65116e-03 + 0.00000e+00i, 0.47808e-03 + 0.00000e+00i,
			0.10000e+01 + 0.00000e+00i, -.11048e-01 + 0.00000e+00i, 0.37942e-01 + 0.00000e+00i, -.93781e-01 + 0.00000e+00i, -.34815e-01 + 0.00000e+00i, 0.44651e+00 + 0.00000e+00i, -.36016e-01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.10000e+02 + 0.00000e+00i, -.69389e-16 + 0.00000e+00i, 0.42585e+00 + 0.00000e+00i, -.64954e+01 + 0.00000e+00i, -.55814e+01 + 0.00000e+00i, -.64516e+01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, -.39041e-01 + 0.00000e+00i, -.40294e-01 + 0.00000e+00i, -.16849e-01 + 0.00000e+00i, -.94294e-01 + 0.00000e+00i, 0.10000e+00 + 0.00000e+00i, -.93714e-01 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, 0.00000e+00 + 0.00000e+00i, -.19851e-02 + 0.00000e+00i,
			0.00000e+00 + 0.00000e+00i, -.27336e-02 + 0.00000e+00i, -.79459e-02 + 0.00000e+00i, 0.63028e-02 + 0.00000e+00i, 0.10000e-01 + 0.00000e+00i, -.62791e-02 + 0.00000e+00i, 0.10000e-01 + 0.00000e+00i,
		},
	}

	for _i, n = range nlist {
		ilo = ilolist[_i]
		ihi = ihilist[_i]

		for i = 1; i <= n; i++ {
			scale.Set(i-1, scalelist[_i][i-1])
			for j = 1; j <= n; j++ {
				e.Set(i-1, j-1, elist[_i][(i-1)*(n)+j-1])
				ein.Set(i-1, j-1, einlist[_i][(i-1)*(n)+j-1])
			}
		}

		knt = knt + 1
		golapack.Zgebak('B', 'R', &n, &ilo, &ihi, scale, &n, e, &lde, &info)

		if info != 0 {
			t.Fail()
			ninfo = ninfo + 1
			lmax[0] = knt
		}

		vmax = zero
		for i = 1; i <= n; i++ {
			for j = 1; j <= n; j++ {
				x = cabs1(e.Get(i-1, j-1)-ein.Get(i-1, j-1)) / eps
				if cabs1(e.Get(i-1, j-1)) > safmin {
					x = x / cabs1(e.Get(i-1, j-1))
				}
				vmax = maxf64(vmax, x)
			}
		}

		if vmax > rmax {
			lmax[1] = knt
			rmax = vmax
		}
	}

	fmt.Printf(" .. test output of ZGEBAK .. \n")

	fmt.Printf(" value of largest test error             = %12.3E\n", rmax)
	fmt.Printf(" example number where info is not zero   = %4d\n", lmax[0])
	fmt.Printf(" example number having largest error     = %4d\n", lmax[1])
	fmt.Printf(" number of examples where info is not 0  = %4d\n", ninfo)
	fmt.Printf(" total number of examples tested         = %4d\n\n", knt)
}
