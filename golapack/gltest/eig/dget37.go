package eig

import (
	"math"

	"github.com/whipstein/golinalg/golapack"
	"github.com/whipstein/golinalg/mat"
)

// dget37 tests DTRSNA, a routine for estimating condition numbers of
// eigenvalues and/or right eigenvectors of a matrix.
//
// The test matrices are read from a file with logical unit number NIN.
func dget37(rmax *mat.Vector, lmax, ninfo *[]int) (knt int) {
	var bignum, eps, epsin, one, smlnum, tnrm, tol, tolin, two, v, vimin, vmax, vmul, vrmin, zero float64
	var _i, i, icmp, ifnd, info, iscl, j, kmin, ldt, lwork, n int
	var err error

	cnt := 0
	zero = 0.0
	one = 1.0
	two = 2.0
	epsin = 5.9605e-8
	ldt = 20
	lwork = 2 * ldt * (10 + ldt)
	_select := make([]bool, 20)
	dum := vf(1)
	s := vf(20)
	sep := vf(20)
	sepin := vf(20)
	septmp := vf(20)
	sin := vf(20)
	stmp := vf(20)
	val := vf(3)
	wi := vf(20)
	wiin := vf(20)
	witmp := vf(20)
	work := vf(lwork)
	wr := vf(20)
	wrin := vf(20)
	wrtmp := vf(20)
	iwork := make([]int, lwork)
	lcmp := make([]int, 3)
	le := mf(20, 20, opts)
	re := mf(20, 20, opts)
	t := mf(20, 20, opts)
	tmp := mf(20, 20, opts)

	eps = golapack.Dlamch(Precision)
	smlnum = golapack.Dlamch(SafeMinimum) / eps
	bignum = one / smlnum
	smlnum, bignum = golapack.Dlabad(smlnum, bignum)

	//     EPSIN = 2**(-24) = precision to which input data computed
	eps = math.Max(eps, epsin)
	rmax.Set(0, zero)
	rmax.Set(1, zero)
	rmax.Set(2, zero)
	(*lmax)[0] = 0
	(*lmax)[1] = 0
	(*lmax)[2] = 0
	knt = 0
	(*ninfo)[0] = 0
	(*ninfo)[1] = 0
	(*ninfo)[2] = 0

	val.Set(0, math.Sqrt(smlnum))
	val.Set(1, one)
	val.Set(2, math.Sqrt(bignum))

	nlist := []int{1, 1, 2, 2, 2, 6, 4, 5, 5, 6, 6, 6, 4, 6, 5, 10, 4, 6, 10, 4, 6, 4, 3, 6, 6, 6, 6, 6, 12, 6, 6, 6, 6, 8, 6, 4, 5, 6, 10}
	tmplist := [][]float64{
		{
			0.0000e+00,
		},
		{
			1.0000e+00,
		},
		{
			0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00,
		},
		{
			3.0000e+00, 2.0000e+00,
			2.0000e+00, 3.0000e+00,
		},
		{
			3.0000e+00, -2.0000e+00,
			2.0000e+00, 3.0000e+00,
		},
		{
			1.0000e-07, -1.0000e-07, 1.0000e+00, 1.1000e+00, 2.3000e+00, 3.7000e+00,
			3.0000e-07, 1.0000e-07, 1.0000e+00, 1.0000e+00, -1.3000e+00, -7.7000e+00,
			0.0000e+00, 0.0000e+00, 3.0000e-07, 1.0000e-07, 2.2000e+00, 3.3000e+00,
			0.0000e+00, 0.0000e+00, -1.0000e-07, 3.0000e-07, 1.8000e+00, 1.6000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 4.0000e-06, 5.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.0000e+00, 4.0000e-06,
		},
		{
			7.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00,
			-1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00,
			-1.0000e+00, 1.0000e+00, 5.0000e+00, -3.0000e+00,
			1.0000e+00, -1.0000e+00, 3.0000e+00, 3.0000e+00,
		},
		{
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
		},
		{
			1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
		},
		{
			1.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 1.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 1.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 1.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 1.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
		},
		{
			1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			1.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 1.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 1.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 1.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 1.0000e+00,
		},
		{
			1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 2.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 3.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 4.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 5.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 6.0000e+00,
		},
		{
			9.4480e-01, 6.7670e-01, 6.9080e-01, 5.9650e-01,
			5.8760e-01, 8.6420e-01, 6.7690e-01, 7.2600e-02,
			7.2560e-01, 1.9430e-01, 9.6870e-01, 2.8310e-01,
			2.8490e-01, 5.8000e-02, 4.8450e-01, 7.3610e-01,
		},
		{
			5.0410e-01, 6.6520e-01, 7.7190e-01, 6.3870e-01, 5.9550e-01, 6.1310e-01,
			1.5740e-01, 3.7340e-01, 5.9840e-01, 1.5470e-01, 9.4270e-01, 6.5900e-02,
			4.4170e-01, 7.2300e-02, 1.5440e-01, 5.4920e-01, 8.7000e-03, 3.0040e-01,
			2.0080e-01, 6.0800e-01, 3.0340e-01, 8.4390e-01, 2.3900e-01, 5.7680e-01,
			9.3610e-01, 7.4130e-01, 1.4440e-01, 1.7860e-01, 1.4280e-01, 7.2630e-01,
			5.5990e-01, 9.3360e-01, 7.8000e-02, 4.0930e-01, 6.7140e-01, 5.6170e-01,
		},
		{
			2.0000e-03, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 1.0000e-03, 1.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, -1.0000e-03, 1.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, -2.0000e-03, 1.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
		},
		{
			4.8630e-01, 9.1260e-01, 2.1900e-02, 6.0110e-01, 1.4050e-01, 2.0840e-01, 8.2640e-01, 8.4410e-01, 3.1420e-01, 8.6750e-01,
			7.1500e-01, 2.6480e-01, 8.8510e-01, 2.6150e-01, 5.9520e-01, 4.7800e-01, 7.6730e-01, 4.6110e-01, 5.7320e-01, 7.7000e-03,
			2.1210e-01, 5.5080e-01, 5.2350e-01, 3.0810e-01, 6.6020e-01, 2.8900e-01, 2.3140e-01, 2.2790e-01, 9.6600e-02, 1.0910e-01,
			7.1510e-01, 8.5790e-01, 5.7710e-01, 5.1140e-01, 1.9010e-01, 9.0810e-01, 6.0090e-01, 7.1980e-01, 1.0640e-01, 8.6840e-01,
			5.6800e-01, 2.8100e-02, 4.0140e-01, 6.3150e-01, 1.1480e-01, 7.5800e-02, 9.4230e-01, 7.2030e-01, 3.6850e-01, 1.7430e-01,
			7.7210e-01, 3.0280e-01, 5.5640e-01, 9.9980e-01, 3.6520e-01, 5.2580e-01, 3.7030e-01, 6.7790e-01, 9.9350e-01, 5.0270e-01,
			7.3960e-01, 4.5600e-02, 7.4740e-01, 9.2880e-01, 2.2000e-03, 8.2600e-02, 3.6340e-01, 4.9120e-01, 9.4050e-01, 3.8910e-01,
			5.6370e-01, 8.5540e-01, 3.2100e-02, 2.6380e-01, 3.6090e-01, 6.4970e-01, 8.4690e-01, 9.3500e-01, 3.7000e-02, 2.9170e-01,
			8.6560e-01, 6.3270e-01, 3.5620e-01, 6.3560e-01, 2.7360e-01, 6.5120e-01, 1.0220e-01, 2.8880e-01, 5.7620e-01, 4.0790e-01,
			5.3320e-01, 4.1210e-01, 7.2870e-01, 2.3110e-01, 6.8300e-01, 7.3860e-01, 8.1800e-01, 9.8150e-01, 8.0550e-01, 2.5660e-01,
		},
		{
			-3.8730e-01, 3.6560e-01, 3.1200e-02, -5.8340e-01,
			5.5230e-01, -1.1854e+00, 9.8330e-01, 7.6670e-01,
			1.6746e+00, -1.9900e-02, -1.8293e+00, 5.7180e-01,
			-5.2500e-01, 3.5340e-01, -2.7210e-01, -8.8300e-02,
		},
		{
			-1.0777e+00, 1.7027e+00, 2.6510e-01, 8.5160e-01, 1.0121e+00, 2.5710e-01,
			-1.3400e-02, 3.9030e-01, -1.2680e+00, 2.7530e-01, -3.2350e-01, -1.3844e+00,
			1.5230e-01, 3.0680e-01, 8.7330e-01, -3.3410e-01, -4.8310e-01, -1.5416e+00,
			1.4470e-01, -6.0570e-01, 3.1900e-02, -1.0905e+00, -8.3700e-02, 6.2410e-01,
			-7.6510e-01, -1.7889e+00, -1.5069e+00, -6.0210e-01, 5.2170e-01, 6.4700e-01,
			8.1940e-01, 2.1100e-01, 5.4320e-01, 7.5610e-01, 1.7130e-01, 5.5400e-01,
		},
		{
			-1.0639e+00, 1.6120e-01, 1.5620e-01, 3.4360e-01, -6.7480e-01, 1.6598e+00, 6.4650e-01, -7.8630e-01, -2.6100e-01, 7.0190e-01,
			-8.4400e-01, -2.2439e+00, 1.8800e+00, -1.0005e+00, 7.4500e-02, -1.6156e+00, 2.8220e-01, 8.5600e-01, 1.3497e+00, -1.5883e+00,
			1.5988e+00, 1.1758e+00, 1.2398e+00, 1.1173e+00, 2.1500e-01, 4.3140e-01, 1.8500e-01, 7.9470e-01, 6.6260e-01, 8.6460e-01,
			-2.2960e-01, 1.2442e+00, 2.3242e+00, -5.0690e-01, -7.5160e-01, -5.4370e-01, -2.5990e-01, 1.2830e+00, -1.1067e+00, -1.1150e-01,
			-3.6040e-01, 4.0420e-01, 6.1240e-01, -1.2164e+00, -9.4650e-01, -3.1460e-01, 1.8310e-01, 7.3710e-01, 1.4278e+00, 2.9220e-01,
			4.6150e-01, 3.8740e-01, -4.2900e-02, -9.3600e-01, 7.1160e-01, -8.2590e-01, -1.7640e+00, -9.4660e-01, 1.8202e+00, -2.5480e-01,
			1.2934e+00, -9.7550e-01, 6.7480e-01, -1.0481e+00, -1.8442e+00, -5.4600e-02, 7.4050e-01, 6.1000e-03, 1.2430e+00, -1.8490e-01,
			-3.4710e-01, -9.5800e-01, 1.6530e-01, 9.1300e-02, -5.2010e-01, -1.1832e+00, 8.5410e-01, -2.3200e-01, -1.6155e+00, 5.5180e-01,
			1.0190e+00, -6.8240e-01, 8.0850e-01, 2.5950e-01, -3.7580e-01, -1.8825e+00, 1.6473e+00, -6.5920e-01, 8.0250e-01, -4.9000e-03,
			1.2670e+00, -4.2400e-02, 8.9570e-01, -1.6770e-01, 1.4620e-01, 9.8800e-01, -2.3170e-01, -1.4483e+00, -5.8200e-02, 1.9700e-02,
		},
		{
			-1.2298e+00, -2.3142e+00, -6.9800e-02, 1.0523e+00,
			2.0390e-01, -1.2298e+00, 8.0500e-02, 9.7860e-01,
			0.0000e+00, 0.0000e+00, 2.5600e-01, -8.9100e-01,
			0.0000e+00, 0.0000e+00, 2.7480e-01, 2.5600e-01,
		},
		{
			5.9930e-01, 1.9372e+00, -1.6160e-01, -1.4602e+00, 6.0180e-01, 2.7120e+00,
			-2.2049e+00, 5.9930e-01, -1.0679e+00, 1.9405e+00, -1.4400e+00, -2.2110e-01,
			0.0000e+00, 0.0000e+00, -2.4567e+00, -6.8650e-01, -1.9101e+00, 6.4960e-01,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 7.3620e-01, 3.9700e-01, -1.5190e-01,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, -1.0034e+00, 1.1954e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, -1.3400e-01, -1.0034e+00,
		},
		{
			1.0000e-04, 1.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, -1.0000e-04, 1.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 1.0000e-02, 1.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, -5.0000e-03,
		},
		{
			2.0000e-06, 1.0000e+00, -2.0000e+00,
			1.0000e-06, -2.0000e+00, 4.0000e+00,
			0.0000e+00, 1.0000e+00, -2.0000e+00,
		},
		{
			2.4080e-01, 6.5530e-01, 9.1660e-01, 5.0300e-02, 2.8490e-01, 2.4080e-01,
			6.9070e-01, 9.7000e-01, 1.4020e-01, 5.7820e-01, 6.7670e-01, 6.9070e-01,
			1.0620e-01, 3.8000e-02, 7.0540e-01, 2.4320e-01, 8.6420e-01, 1.0620e-01,
			2.6400e-01, 9.8800e-02, 1.7800e-02, 9.4480e-01, 1.9430e-01, 2.6400e-01,
			7.0340e-01, 2.5600e-01, 2.6110e-01, 5.8760e-01, 5.8000e-02, 7.0340e-01,
			4.0210e-01, 5.5980e-01, 1.3580e-01, 7.2560e-01, 6.9080e-01, 4.0210e-01,
		},
		{
			3.4800e+00, -2.9900e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			-4.9000e-01, 2.4800e+00, -1.9900e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, -4.9000e-01, 1.4800e+00, -9.9000e-01, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, -9.9000e-01, 1.4800e+00, -4.9000e-01, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, -1.9900e+00, 2.4800e+00, -4.9000e-01,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, -2.9900e+00, 3.4800e+00,
		},
		{
			0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
			1.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 1.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 1.0000e+00,
			-1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00,
		},
		{
			3.5345e-01, 9.3023e-01, 7.4679e-02, -1.0059e-02, 4.6698e-02, -4.3480e-02,
			9.3545e-01, -3.5147e-01, -2.8216e-02, 3.8008e-03, -1.7644e-02, 1.6428e-02,
			0.0000e+00, -1.0555e-01, 7.5211e-01, -1.0131e-01, 4.7030e-01, -4.3789e-01,
			0.0000e+00, 0.0000e+00, 6.5419e-01, 1.1779e-01, -5.4678e-01, 5.0911e-01,
			0.0000e+00, 0.0000e+00, 0.0000e+00, -9.8780e-01, -1.1398e-01, 1.0612e-01,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 6.8144e-01, 7.3187e-01,
		},
		{
			1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00,
			5.0000e-01, 3.3330e-01, 2.5000e-01, 2.0000e-01, 1.6670e-01, 1.4290e-01,
			3.3330e-01, 2.5000e-01, 2.0000e-01, 1.6670e-01, 1.4290e-01, 1.2500e-01,
			2.5000e-01, 2.0000e-01, 1.6670e-01, 1.4290e-01, 1.2500e-01, 1.1110e-01,
			2.0000e-01, 1.6670e-01, 1.4290e-01, 1.2500e-01, 1.1110e-01, 1.0000e-01,
			1.6670e-01, 1.4290e-01, 1.2500e-01, 1.1110e-01, 1.0000e-01, 9.0900e-02,
		},
		{
			1.2000e+01, 1.1000e+01, 1.0000e+01, 9.0000e+00, 8.0000e+00, 7.0000e+00, 6.0000e+00, 5.0000e+00, 4.0000e+00, 3.0000e+00, 2.0000e+00, 1.0000e+00,
			1.1000e+01, 1.1000e+01, 1.0000e+01, 9.0000e+00, 8.0000e+00, 7.0000e+00, 6.0000e+00, 5.0000e+00, 4.0000e+00, 3.0000e+00, 2.0000e+00, 1.0000e+00,
			0.0000e+00, 1.0000e+01, 1.0000e+01, 9.0000e+00, 8.0000e+00, 7.0000e+00, 6.0000e+00, 5.0000e+00, 4.0000e+00, 3.0000e+00, 2.0000e+00, 1.0000e+00,
			0.0000e+00, 0.0000e+00, 9.0000e+00, 9.0000e+00, 8.0000e+00, 7.0000e+00, 6.0000e+00, 5.0000e+00, 4.0000e+00, 3.0000e+00, 2.0000e+00, 1.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 8.0000e+00, 8.0000e+00, 7.0000e+00, 6.0000e+00, 5.0000e+00, 4.0000e+00, 3.0000e+00, 2.0000e+00, 1.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 7.0000e+00, 7.0000e+00, 6.0000e+00, 5.0000e+00, 4.0000e+00, 3.0000e+00, 2.0000e+00, 1.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 6.0000e+00, 6.0000e+00, 5.0000e+00, 4.0000e+00, 3.0000e+00, 2.0000e+00, 1.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 5.0000e+00, 5.0000e+00, 4.0000e+00, 3.0000e+00, 2.0000e+00, 1.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 4.0000e+00, 4.0000e+00, 3.0000e+00, 2.0000e+00, 1.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.0000e+00, 3.0000e+00, 2.0000e+00, 1.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.0000e+00, 2.0000e+00, 1.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 1.0000e+00,
		},
		{
			0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			5.0000e+00, 0.0000e+00, 2.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 4.0000e+00, 0.0000e+00, 3.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 3.0000e+00, 0.0000e+00, 4.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 2.0000e+00, 0.0000e+00, 5.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00,
		},
		{
			1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
			-1.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
			-1.0000e+00, -1.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
			-1.0000e+00, -1.0000e+00, -1.0000e+00, 1.0000e+00, 0.0000e+00, 1.0000e+00,
			-1.0000e+00, -1.0000e+00, -1.0000e+00, -1.0000e+00, 1.0000e+00, 1.0000e+00,
			-1.0000e+00, -1.0000e+00, -1.0000e+00, -1.0000e+00, -1.0000e+00, 1.0000e+00,
		},
		{
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
			1.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 1.0000e+00,
			0.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 0.0000e+00, 1.0000e+00,
			1.0000e+00, 0.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00,
			1.0000e+00, 0.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 0.0000e+00,
			0.0000e+00, 1.0000e+00, 0.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00,
		},
		{
			1.0000e+00, 4.0112e+00, 1.2750e+01, 4.0213e+01, 1.2656e+02, 3.9788e+02,
			1.0000e+00, 3.2616e+00, 1.0629e+01, 3.3342e+01, 1.0479e+02, 3.2936e+02,
			1.0000e+00, 3.1500e+00, 9.8006e+00, 3.0630e+01, 9.6164e+01, 3.0215e+02,
			1.0000e+00, 3.2755e+00, 1.0420e+01, 3.2957e+01, 1.0374e+02, 3.2616e+02,
			1.0000e+00, 2.8214e+00, 8.4558e+00, 2.6296e+01, 8.2443e+01, 2.5893e+02,
			1.0000e+00, 2.6406e+00, 8.3565e+00, 2.6558e+01, 8.3558e+01, 2.6268e+02,
		},
		{
			0.0000e+00, 4.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			1.0000e+00, 0.0000e+00, 4.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 1.0000e+00, 0.0000e+00, 4.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 4.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 4.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 4.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 4.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00,
		},
		{
			8.5000e+00, -1.0472e+01, 2.8944e+00, -1.5279e+00, 1.1056e+00, -5.0000e-01,
			2.6180e+00, -1.1708e+00, -2.0000e+00, 8.9440e-01, -6.1800e-01, 2.7640e-01,
			-7.2360e-01, 2.0000e+00, -1.7080e-01, -1.6180e+00, 8.9440e-01, -3.8200e-01,
			3.8200e-01, -8.9440e-01, 1.6180e+00, 1.7080e-01, -2.0000e+00, 7.2360e-01,
			-2.7640e-01, 6.1800e-01, -8.9440e-01, 2.0000e+00, 1.1708e+00, -2.6180e+00,
			5.0000e-01, -1.1056e+00, 1.5279e+00, -2.8944e+00, 1.0472e+01, -8.5000e+00,
		},
		{
			4.0000e+00, -5.0000e+00, 0.0000e+00, 3.0000e+00,
			0.0000e+00, 4.0000e+00, -3.0000e+00, -5.0000e+00,
			5.0000e+00, -3.0000e+00, 4.0000e+00, 0.0000e+00,
			3.0000e+00, 0.0000e+00, 5.0000e+00, 4.0000e+00,
		},
		{
			1.5000e+01, 1.1000e+01, 6.0000e+00, -9.0000e+00, -1.5000e+01,
			1.0000e+00, 3.0000e+00, 9.0000e+00, -3.0000e+00, -8.0000e+00,
			7.0000e+00, 6.0000e+00, 6.0000e+00, -3.0000e+00, -1.1000e+01,
			7.0000e+00, 7.0000e+00, 5.0000e+00, -3.0000e+00, -1.1000e+01,
			1.7000e+01, 1.2000e+01, 5.0000e+00, -1.0000e+01, -1.6000e+01,
		},
		{
			-9.0000e+00, 2.1000e+01, -1.5000e+01, 4.0000e+00, 2.0000e+00, 0.0000e+00,
			-1.0000e+01, 2.1000e+01, -1.4000e+01, 4.0000e+00, 2.0000e+00, 0.0000e+00,
			-8.0000e+00, 1.6000e+01, -1.1000e+01, 4.0000e+00, 2.0000e+00, 0.0000e+00,
			-6.0000e+00, 1.2000e+01, -9.0000e+00, 3.0000e+00, 3.0000e+00, 0.0000e+00,
			-4.0000e+00, 8.0000e+00, -6.0000e+00, 0.0000e+00, 5.0000e+00, 0.0000e+00,
			-2.0000e+00, 4.0000e+00, -3.0000e+00, 0.0000e+00, 1.0000e+00, 3.0000e+00,
		},
		{
			1.0000e+00, 1.0000e+00, 1.0000e+00, -2.0000e+00, 1.0000e+00, -1.0000e+00, 2.0000e+00, -2.0000e+00, 4.0000e+00, -3.0000e+00,
			-1.0000e+00, 2.0000e+00, 3.0000e+00, -4.0000e+00, 2.0000e+00, -2.0000e+00, 4.0000e+00, -4.0000e+00, 8.0000e+00, -6.0000e+00,
			-1.0000e+00, 0.0000e+00, 5.0000e+00, -5.0000e+00, 3.0000e+00, -3.0000e+00, 6.0000e+00, -6.0000e+00, 1.2000e+01, -9.0000e+00,
			-1.0000e+00, 0.0000e+00, 3.0000e+00, -4.0000e+00, 4.0000e+00, -4.0000e+00, 8.0000e+00, -8.0000e+00, 1.6000e+01, -1.2000e+01,
			-1.0000e+00, 0.0000e+00, 3.0000e+00, -6.0000e+00, 5.0000e+00, -4.0000e+00, 1.0000e+01, -1.0000e+01, 2.0000e+01, -1.5000e+01,
			-1.0000e+00, 0.0000e+00, 3.0000e+00, -6.0000e+00, 2.0000e+00, -2.0000e+00, 1.2000e+01, -1.2000e+01, 2.4000e+01, -1.8000e+01,
			-1.0000e+00, 0.0000e+00, 3.0000e+00, -6.0000e+00, 2.0000e+00, -5.0000e+00, 1.5000e+01, -1.3000e+01, 2.8000e+01, -2.1000e+01,
			-1.0000e+00, 0.0000e+00, 3.0000e+00, -6.0000e+00, 2.0000e+00, -5.0000e+00, 1.2000e+01, -1.1000e+01, 3.2000e+01, -2.4000e+01,
			-1.0000e+00, 0.0000e+00, 3.0000e+00, -6.0000e+00, 2.0000e+00, -5.0000e+00, 1.2000e+01, -1.4000e+01, 3.7000e+01, -2.6000e+01,
			-1.0000e+00, 0.0000e+00, 3.0000e+00, -6.0000e+00, 2.0000e+00, -5.0000e+00, 1.2000e+01, -1.4000e+01, 3.6000e+01, -2.5000e+01,
		},
	}
	wrinlist := [][]float64{
		{0.0000e+00},
		{1.0000e+00},
		{0.0000e+00, 0.0000e+00},
		{1.0000e+00, 5.0000e+00},
		{3.0000e+00, 3.0000e+00},
		{-3.8730e+00, 1.0000e-07, 1.0000e-07, 3.0000e-07, 3.0000e-07, 3.8730e+00},
		{3.9603e+00, 3.9603e+00, 4.0397e+00, 4.0397e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00},
		{1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00},
		{1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00},
		{1.0000e+00, 2.0000e+00, 3.0000e+00, 4.0000e+00, 5.0000e+00, 6.0000e+00},
		{2.4326e-01, 2.4326e-01, 7.4091e-01, 2.2864e+00},
		{-5.2278e-01, -3.5380e-01, -8.0876e-03, 3.4760e-01, 3.4760e-01, 2.7698e+00},
		{-2.0000e-03, -1.0000e-03, 0.0000e+00, 1.0000e-03, 2.0000e-03},
		{-4.6121e-01, -4.6121e-01, -4.5164e-01, -1.4922e-01, -1.4922e-01, 3.3062e-02, 3.0849e-01, 3.0849e-01, 5.4509e-01, 5.0352e+00},
		{-1.8952e+00, -1.8952e+00, -9.5162e-02, 3.9520e-01},
		{-1.7029e+00, -1.0307e+00, 2.8487e-01, 2.8487e-01, 1.1675e+00, 1.1675e+00},
		{-2.6992e+00, -2.6992e+00, -2.4366e+00, -1.2882e+00, -1.2882e+00, 9.0275e-01, 9.0442e-01, 9.0442e-01, 1.6774e+00, 3.0060e+00},
		{-1.2298e+00, -1.2298e+00, 2.5600e-01, 2.5600e-01},
		{-2.4567e+00, -1.0034e+00, -1.0034e+00, 5.9930e-01, 5.9930e-01, 7.3620e-01},
		{-5.0000e-03, -1.0000e-04, 1.0000e-04, 1.0000e-02},
		{-4.0000e+00, 0.0000e+00, 2.2096e-06},
		{-3.4008e-01, -3.4008e-01, -1.6998e-07, 7.2311e-01, 7.2311e-01, 2.5551e+00},
		{1.3034e-02, 1.1294e+00, 2.0644e+00, 2.8388e+00, 4.3726e+00, 4.4618e+00},
		{-1.7321e+00, -1.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 1.7321e+00},
		{-9.9980e-01, -9.9980e-01, 7.4539e-01, 7.4539e-01, 9.9929e-01, 9.9929e-01},
		{-2.2135e-01, -3.1956e-02, -8.5031e-04, -5.8584e-05, 1.3895e-05, 2.1324e+00},
		{-2.8234e-02, 7.2587e-02, 7.2587e-02, 1.8533e-01, 2.8828e-01, 6.4315e-01, 1.5539e+00, 3.5119e+00, 6.9615e+00, 1.2311e+01, 2.0199e+01, 3.2229e+01},
		{-5.0000e+00, -3.0000e+00, -1.0000e+00, 1.0000e+00, 3.0000e+00, 5.0000e+00},
		{8.0298e-02, 8.0298e-02, 1.4415e+00, 1.4415e+00, 1.4782e+00, 1.4782e+00},
		{-3.5343e-02, -3.5343e-02, 5.8440e-07, 6.4087e-01, 6.4087e-01, 3.7889e+00},
		{-5.3220e-01, -1.0118e-01, -9.8749e-03, 2.9861e-03, 1.8075e-01, 3.9260e+02},
		{-3.7588e+00, -3.0642e+00, -2.0000e+00, -6.9459e-01, 6.9459e-01, 2.0000e+00, 3.0642e+00, 3.7588e+00},
		{-5.8930e-01, -2.7627e-01, -2.7627e-01, 2.7509e-01, 2.7509e-01, 5.9167e-01},
		{1.0000e+00, 1.0000e+00, 2.0000e+00, 1.2000e+01},
		{-9.9999e-01, 1.4980e+00, 1.4980e+00, 1.5020e+00, 1.5020e+00},
		{1.0000e+00, 1.0000e+00, 2.0000e+00, 2.0000e+00, 3.0000e+00, 3.0000e+00},
		{1.0000e+00, 1.9867e+00, 2.0000e+00, 2.0000e+00, 2.0067e+00, 2.0067e+00, 2.9970e+00, 3.0000e+00, 3.0000e+00, 3.0030e+00},
	}
	wiinlist := [][]float64{
		{0.0000e+00},
		{0.0000e+00},
		{0.0000e+00, 0.0000e+00},
		{0.0000e+00, 0.0000e+00},
		{2.0000e+00, -2.0000e+00},
		{0.0000e+00, 1.7321e-07, -1.7321e-07, 1.0000e-07, -1.0000e-07, 0.0000e+00},
		{4.0425e-02, -4.0425e-02, 3.8854e-02, -3.8854e-02},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{2.1409e-01, -2.1409e-01, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 3.0525e-01, -3.0525e-01, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{7.2657e-01, -7.2657e-01, 0.0000e+00, 4.8255e-01, -4.8255e-01, 0.0000e+00, 1.1953e-01, -1.1953e-01, 0.0000e+00, 0.0000e+00},
		{7.5059e-01, -7.5059e-01, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 1.2101e+00, -1.2101e+00, 4.6631e-01, -4.6631e-01},
		{9.0387e-01, -9.0387e-01, 0.0000e+00, 8.8930e-01, -8.8930e-01, 0.0000e+00, 2.5661e+00, -2.5661e+00, 0.0000e+00, 0.0000e+00},
		{6.8692e-01, -6.8692e-01, 4.9482e-01, -4.9482e-01},
		{0.0000e+00, 4.0023e-01, -4.0023e-01, 2.0667e+00, -2.0667e+00, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00},
		{3.2133e-01, -3.2133e-01, 0.0000e+00, 5.9389e-02, -5.9389e-02, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{1.9645e-02, -1.9645e-02, 6.6663e-01, -6.6663e-01, 3.7545e-02, -3.7545e-02},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 9.0746e-02, -9.0746e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{2.4187e+00, -2.4187e+00, 6.2850e-01, -6.2850e-01, 1.5638e-01, -1.5638e-01},
		{7.4812e-01, -7.4812e-01, 0.0000e+00, 7.2822e-01, -7.2822e-01, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 4.9852e-01, -4.9852e-01, 5.0059e-01, -5.0059e-01, 0.0000e+00},
		{5.0000e+00, -5.0000e+00, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 3.5752e+00, -3.5752e+00, 3.5662e+00, -3.5662e+00},
		{6.2559e-04, -6.2559e-04, 1.0001e+00, -1.0001e+00, 0.0000e+00, 0.0000e+00},
		{0.0000e+00, 0.0000e+00, 2.5052e-03, -2.5052e-03, 1.1763e-02, -1.1763e-02, 0.0000e+00, 8.7028e-04, -8.7028e-04, 0.0000e+00},
	}
	sinlist := [][]float64{
		{1.0000e+00},
		{1.0000e+00},
		{1.0000e+00, 1.0000e+00},
		{1.0000e+00, 1.0000e+00},
		{1.0000e+00, 1.0000e+00},
		{6.9855e-01, 9.7611e-08, 9.7611e-08, 1.0000e-07, 1.0000e-07, 4.0659e-01},
		{1.1244e-05, 1.1244e-05, 1.0807e-05, 1.0807e-05},
		{1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00},
		{1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00},
		{2.4074e-35, 2.4074e-35, 2.4074e-35, 2.4074e-35, 2.4074e-35, 2.4074e-35},
		{2.4074e-35, 2.4074e-35, 2.4074e-35, 2.4074e-35, 2.4074e-35, 2.4074e-35},
		{1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00},
		{8.7105e-01, 8.7105e-01, 9.8194e-01, 9.7723e-01},
		{2.7888e-01, 3.5427e-01, 3.4558e-01, 5.4661e-01, 5.4661e-01, 9.6635e-01},
		{2.4000e-11, 6.0000e-12, 4.0000e-12, 6.0000e-12, 2.4000e-11},
		{4.7781e-01, 4.7781e-01, 4.6034e-01, 4.7500e-01, 4.7500e-01, 2.9729e-01, 4.2947e-01, 4.2947e-01, 7.0777e-01, 9.7257e-01},
		{8.1913e-01, 8.1913e-01, 8.0499e-01, 9.8222e-01},
		{6.7909e-01, 7.2671e-01, 3.9757e-01, 3.9757e-01, 4.2334e-01, 4.2334e-01},
		{6.4005e-01, 6.4005e-01, 6.9083e-01, 5.3435e-01, 5.3435e-01, 2.9802e-01, 7.3193e-01, 7.3193e-01, 3.0743e-01, 8.5623e-01},
		{4.7136e-01, 4.7136e-01, 8.0960e-01, 8.0960e-01},
		{4.7091e-01, 3.6889e-01, 3.6889e-01, 5.8849e-01, 5.8849e-01, 6.0845e-01},
		{3.7485e-07, 9.8979e-09, 1.0098e-08, 1.4996e-06},
		{7.3030e-01, 7.2801e-01, 8.2763e-01},
		{5.7839e-01, 5.7839e-01, 4.9641e-01, 7.0039e-01, 7.0039e-01, 9.2518e-01},
		{7.5301e-01, 6.0479e-01, 5.4665e-01, 4.2771e-01, 6.6370e-01, 5.7388e-01},
		{8.6603e-01, 5.0000e-01, 2.9582e-31, 2.9582e-31, 5.0000e-01, 8.6603e-01},
		{1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00},
		{4.0841e-01, 3.7927e-01, 6.2793e-01, 8.1156e-01, 9.7087e-01, 8.4325e-01},
		{2.8690e-06, 1.5885e-06, 1.5885e-06, 6.5757e-07, 1.8324e-06, 6.8640e-05, 4.6255e-03, 1.4447e-01, 5.8447e-01, 3.1823e-01, 2.0079e-01, 3.0424e-01},
		{8.2295e-01, 7.2281e-01, 6.2854e-01, 6.2854e-01, 7.2281e-01, 8.2295e-01},
		{8.9968e-01, 8.9968e-01, 9.6734e-01, 9.6734e-01, 9.7605e-01, 9.7605e-01},
		{3.9345e-01, 3.9345e-01, 2.8868e-01, 4.5013e-01, 4.5013e-01, 9.6305e-01},
		{5.3287e-01, 7.2342e-01, 7.3708e-01, 4.4610e-01, 4.2881e-01, 4.8057e-01},
		{1.2253e-01, 4.9811e-02, 3.6914e-02, 3.3328e-02, 3.3328e-02, 3.6914e-02, 4.9811e-02, 1.2253e-01},
		{1.7357e-04, 1.7486e-04, 1.7486e-04, 1.7635e-04, 1.7635e-04, 1.7623e-04},
		{1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00},
		{2.1768e-01, 3.9966e-04, 3.9966e-04, 3.9976e-04, 3.9976e-04},
		{6.4875e-05, 6.4875e-05, 5.4076e-02, 5.4076e-02, 8.6149e-01, 1.2425e-01},
		{3.6037e-02, 7.4283e-05, 1.4346e-04, 1.4346e-04, 6.7873e-05, 6.7873e-05, 9.2779e-05, 2.7358e-04, 2.7358e-04, 9.2696e-05},
	}
	sepinlist := [][]float64{
		{0.0000e+00},
		{1.0000e+00},
		{0.0000e+00, 0.0000e+00},
		{4.0000e+00, 4.0000e+00},
		{4.0000e+00, 4.0000e+00},
		{2.2823e+00, 5.0060e-14, 5.0060e-14, 9.4094e-14, 9.4094e-14, 1.5283e+00},
		{3.1179e-05, 3.1179e-05, 2.9981e-05, 2.9981e-05},
		{1.9722e-31, 1.9722e-31, 1.9722e-31, 1.9722e-31, 1.9722e-31},
		{1.9722e-31, 1.9722e-31, 1.9722e-31, 1.9722e-31, 1.9722e-31},
		{2.4074e-35, 2.4074e-35, 2.4074e-35, 2.4074e-35, 2.4074e-35, 2.4074e-35},
		{2.4074e-35, 2.4074e-35, 2.4074e-35, 2.4074e-35, 2.4074e-35, 2.4074e-35},
		{1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00},
		{3.5073e-01, 3.5073e-01, 4.6989e-01, 1.5455e+00},
		{1.1793e-01, 6.8911e-02, 1.3489e-01, 1.7729e-01, 1.7729e-01, 1.8270e+00},
		{2.3952e-11, 5.9940e-12, 3.9920e-12, 5.9940e-12, 2.3952e-11},
		{1.5842e-01, 1.5842e-01, 1.9931e-01, 9.1686e-02, 9.1686e-02, 8.2469e-02, 3.9688e-02, 3.9688e-02, 1.5033e-01, 3.5548e+00},
		{7.7090e-01, 7.7090e-01, 4.9037e-01, 4.9037e-01},
		{6.7220e-01, 2.0436e-01, 4.9797e-01, 4.9797e-01, 1.9048e-01, 1.9048e-01},
		{4.1615e-01, 4.1615e-01, 2.5476e-01, 6.0878e-01, 6.0878e-01, 4.7530e-01, 6.2016e-01, 6.2016e-01, 4.1726e-01, 4.3175e-01},
		{7.1772e-01, 7.1772e-01, 5.1408e-01, 5.1408e-01},
		{8.5788e-01, 1.8909e-01, 1.8909e-01, 1.3299e+00, 1.3299e+00, 9.6725e-01},
		{3.6932e-07, 9.8493e-09, 1.0046e-08, 1.4773e-06},
		{4.0000e+00, 1.3726e-06, 2.2096e-06},
		{2.0310e-01, 2.0310e-01, 2.1574e-01, 4.1945e-02, 4.1945e-02, 1.7390e+00},
		{6.0533e-01, 2.8613e-01, 1.7376e-01, 3.0915e-01, 7.6443e-02, 8.9227e-02},
		{7.2597e-01, 2.6417e-01, 1.4600e-07, 6.2446e-08, 2.6417e-01, 3.7896e-01},
		{3.9290e-02, 3.9290e-02, 5.2120e-01, 5.2120e-01, 7.5089e-02, 7.5089e-02},
		{1.6605e-01, 3.0531e-02, 7.8195e-04, 7.2478e-05, 7.2478e-05, 1.8048e+00},
		{3.2094e-06, 9.9934e-07, 9.9934e-07, 7.8673e-07, 2.0796e-06, 6.1058e-05, 6.4028e-03, 1.9470e-01, 1.2016e+00, 1.4273e+00, 2.4358e+00, 5.6865e+00},
		{1.2318e+00, 7.5970e-01, 6.9666e-01, 6.9666e-01, 7.5970e-01, 1.2318e+00},
		{1.5236e+00, 1.5236e+00, 4.2793e-01, 4.2793e-01, 2.2005e-01, 2.2005e-01},
		{1.8415e-01, 1.8415e-01, 1.7003e-01, 2.9425e-01, 2.9425e-01, 2.2469e+00},
		{3.8557e-01, 9.1303e-02, 1.1032e-02, 1.2861e-02, 1.7378e-01, 3.9201e+02},
		{1.2978e-01, 8.0162e-02, 8.2942e-02, 1.3738e-01, 1.1171e-01, 7.2156e-02, 6.8352e-02, 1.1527e-01},
		{2.8157e-04, 1.6704e-04, 1.6704e-04, 1.6828e-04, 1.6828e-04, 3.0778e-04},
		{4.3333e+00, 4.3333e+00, 4.3333e+00, 9.1250e+00},
		{5.2263e-01, 6.0947e-03, 6.0947e-03, 6.0960e-03, 6.0960e-03},
		{5.0367e-04, 5.0367e-04, 2.3507e-01, 2.3507e-01, 5.4838e-07, 1.2770e-06},
		{7.9613e-02, 7.4025e-06, 6.7839e-07, 6.7839e-07, 5.7496e-06, 5.7496e-06, 2.6519e-06, 1.9407e-07, 1.9407e-07, 2.6477e-06},
	}

	//     Read input data until N=0.  Assume input eigenvalues are sorted
	//     lexicographically (increasing by real part, then decreasing by
	//     imaginary part)
	for _i, n = range nlist {
		cnt++
		if n == 0 {
			return
		}
		for i = 1; i <= n; i++ {
			for j = 1; j <= n; j++ {
				tmp.Set(i-1, j-1, tmplist[_i][(i-1)*(n)+j-1])
			}
		}
		for i = 1; i <= n; i++ {
			wrin.Set(i-1, wrinlist[_i][i-1])
			wiin.Set(i-1, wiinlist[_i][i-1])
			sin.Set(i-1, sinlist[_i][i-1])
			sepin.Set(i-1, sepinlist[_i][i-1])
		}
		tnrm = golapack.Dlange('M', n, n, tmp, work)

		//     Begin test
		for iscl = 1; iscl <= 3; iscl++ {
			//        Scale input matrix
			knt = knt + 1
			golapack.Dlacpy(Full, n, n, tmp, t)
			vmul = val.Get(iscl - 1)
			for i = 1; i <= n; i++ {
				t.Off(0, i-1).Vector().Scal(n, vmul, 1)
			}
			if tnrm == zero {
				vmul = one
			}

			//        Compute eigenvalues and eigenvectors
			if err = golapack.Dgehrd(n, 1, n, t, work, work.Off(n), lwork-n); err != nil {
				(*lmax)[0] = knt
				(*ninfo)[0] = (*ninfo)[0] + 1
				goto label240
			}
			for j = 1; j <= n-2; j++ {
				for i = j + 2; i <= n; i++ {
					t.Set(i-1, j-1, zero)
				}
			}

			//        Compute Schur form
			if info, err = golapack.Dhseqr('S', 'N', n, 1, n, t, wr, wi, dum.Matrix(1, opts), work, lwork); info != 0 || err != nil {
				(*lmax)[1] = knt
				(*ninfo)[1] = (*ninfo)[1] + 1
				goto label240
			}

			//        Compute eigenvectors
			if _, err = golapack.Dtrevc(Both, 'A', &_select, n, t, le, re, n, work); err != nil {
				panic(err)
			}

			//        Compute condition numbers
			if _, err = golapack.Dtrsna('B', 'A', _select, n, t, le, re, s, sep, n, work.Matrix(n, opts), &iwork); err != nil {
				(*lmax)[2] = knt
				(*ninfo)[2] = (*ninfo)[2] + 1
				goto label240
			}

			//        Sort eigenvalues and condition numbers lexicographically
			//        to compare with inputs
			wrtmp.Copy(n, wr, 1, 1)
			witmp.Copy(n, wi, 1, 1)
			stmp.Copy(n, s, 1, 1)
			septmp.Copy(n, sep, 1, 1)
			septmp.Scal(n, one/vmul, 1)
			for i = 1; i <= n-1; i++ {
				kmin = i
				vrmin = wrtmp.Get(i - 1)
				vimin = witmp.Get(i - 1)
				for j = i + 1; j <= n; j++ {
					if wrtmp.Get(j-1) < vrmin {
						kmin = j
						vrmin = wrtmp.Get(j - 1)
						vimin = witmp.Get(j - 1)
					}
				}
				wrtmp.Set(kmin-1, wrtmp.Get(i-1))
				witmp.Set(kmin-1, witmp.Get(i-1))
				wrtmp.Set(i-1, vrmin)
				witmp.Set(i-1, vimin)
				vrmin = stmp.Get(kmin - 1)
				stmp.Set(kmin-1, stmp.Get(i-1))
				stmp.Set(i-1, vrmin)
				vrmin = septmp.Get(kmin - 1)
				septmp.Set(kmin-1, septmp.Get(i-1))
				septmp.Set(i-1, vrmin)
			}

			//        Compare condition numbers for eigenvalues
			//        taking their condition numbers into account
			v = math.Max(two*float64(n)*eps*tnrm, smlnum)
			if tnrm == zero {
				v = one
			}
			for i = 1; i <= n; i++ {
				if v > septmp.Get(i-1) {
					tol = one
				} else {
					tol = v / septmp.Get(i-1)
				}
				if v > sepin.Get(i-1) {
					tolin = one
				} else {
					tolin = v / sepin.Get(i-1)
				}
				tol = math.Max(tol, smlnum/eps)
				tolin = math.Max(tolin, smlnum/eps)
				if eps*(sin.Get(i-1)-tolin) > stmp.Get(i-1)+tol {
					vmax = one / eps
				} else if sin.Get(i-1)-tolin > stmp.Get(i-1)+tol {
					vmax = (sin.Get(i-1) - tolin) / (stmp.Get(i-1) + tol)
				} else if sin.Get(i-1)+tolin < eps*(stmp.Get(i-1)-tol) {
					vmax = one / eps
				} else if sin.Get(i-1)+tolin < stmp.Get(i-1)-tol {
					vmax = (stmp.Get(i-1) - tol) / (sin.Get(i-1) + tolin)
				} else {
					vmax = one
				}
				if vmax > rmax.Get(1) {
					rmax.Set(1, vmax)
					if (*ninfo)[1] == 0 {
						(*lmax)[1] = knt
					}
				}
			}

			//        Compare condition numbers for eigenvectors
			//        taking their condition numbers into account
			for i = 1; i <= n; i++ {
				if v > septmp.Get(i-1)*stmp.Get(i-1) {
					tol = septmp.Get(i - 1)
				} else {
					tol = v / stmp.Get(i-1)
				}
				if v > sepin.Get(i-1)*sin.Get(i-1) {
					tolin = sepin.Get(i - 1)
				} else {
					tolin = v / sin.Get(i-1)
				}
				tol = math.Max(tol, smlnum/eps)
				tolin = math.Max(tolin, smlnum/eps)
				if eps*(sepin.Get(i-1)-tolin) > septmp.Get(i-1)+tol {
					vmax = one / eps
				} else if sepin.Get(i-1)-tolin > septmp.Get(i-1)+tol {
					vmax = (sepin.Get(i-1) - tolin) / (septmp.Get(i-1) + tol)
				} else if sepin.Get(i-1)+tolin < eps*(septmp.Get(i-1)-tol) {
					vmax = one / eps
				} else if sepin.Get(i-1)+tolin < septmp.Get(i-1)-tol {
					vmax = (septmp.Get(i-1) - tol) / (sepin.Get(i-1) + tolin)
				} else {
					vmax = one
				}
				if vmax > rmax.Get(1) {
					rmax.Set(1, vmax)
					if (*ninfo)[1] == 0 {
						(*lmax)[1] = knt
					}
				}
			}

			//        Compare condition numbers for eigenvalues
			//        without taking their condition numbers into account
			for i = 1; i <= n; i++ {
				if sin.Get(i-1) <= float64(2*n)*eps && stmp.Get(i-1) <= float64(2*n)*eps {
					vmax = one
				} else if eps*sin.Get(i-1) > stmp.Get(i-1) {
					vmax = one / eps
				} else if sin.Get(i-1) > stmp.Get(i-1) {
					vmax = sin.Get(i-1) / stmp.Get(i-1)
				} else if sin.Get(i-1) < eps*stmp.Get(i-1) {
					vmax = one / eps
				} else if sin.Get(i-1) < stmp.Get(i-1) {
					vmax = stmp.Get(i-1) / sin.Get(i-1)
				} else {
					vmax = one
				}
				if vmax > rmax.Get(2) {
					rmax.Set(2, vmax)
					if (*ninfo)[2] == 0 {
						(*lmax)[2] = knt
					}
				}
			}

			//        Compare condition numbers for eigenvectors
			//        without taking their condition numbers into account
			for i = 1; i <= n; i++ {
				if sepin.Get(i-1) <= v && septmp.Get(i-1) <= v {
					vmax = one
				} else if eps*sepin.Get(i-1) > septmp.Get(i-1) {
					vmax = one / eps
				} else if sepin.Get(i-1) > septmp.Get(i-1) {
					vmax = sepin.Get(i-1) / septmp.Get(i-1)
				} else if sepin.Get(i-1) < eps*septmp.Get(i-1) {
					vmax = one / eps
				} else if sepin.Get(i-1) < septmp.Get(i-1) {
					vmax = septmp.Get(i-1) / sepin.Get(i-1)
				} else {
					vmax = one
				}
				if vmax > rmax.Get(2) {
					rmax.Set(2, vmax)
					if (*ninfo)[2] == 0 {
						(*lmax)[2] = knt
					}
				}
			}

			//        Compute eigenvalue condition numbers only and compare
			vmax = zero
			dum.Set(0, -one)
			stmp.Copy(n, dum, 0, 1)
			septmp.Copy(n, dum, 0, 1)
			if _, err = golapack.Dtrsna('E', 'A', _select, n, t, le, re, stmp, septmp, n, work.Matrix(n, opts), &iwork); err != nil {
				(*lmax)[2] = knt
				(*ninfo)[2] = (*ninfo)[2] + 1
				goto label240
			}
			for i = 1; i <= n; i++ {
				if stmp.Get(i-1) != s.Get(i-1) {
					vmax = one / eps
				}
				if septmp.Get(i-1) != dum.Get(0) {
					vmax = one / eps
				}
			}

			//        Compute eigenvector condition numbers only and compare
			stmp.Copy(n, dum, 0, 1)
			septmp.Copy(n, dum, 0, 1)
			if _, err = golapack.Dtrsna('V', 'A', _select, n, t, le, re, stmp, septmp, n, work.Matrix(n, opts), &iwork); err != nil {
				(*lmax)[2] = knt
				(*ninfo)[2] = (*ninfo)[2] + 1
				goto label240
			}
			for i = 1; i <= n; i++ {
				if stmp.Get(i-1) != dum.Get(0) {
					vmax = one / eps
				}
				if septmp.Get(i-1) != sep.Get(i-1) {
					vmax = one / eps
				}
			}

			//        Compute all condition numbers using SELECT and compare
			for i = 1; i <= n; i++ {
				_select[i-1] = true
			}
			stmp.Copy(n, dum, 0, 1)
			septmp.Copy(n, dum, 0, 1)
			if _, err = golapack.Dtrsna('B', 'S', _select, n, t, le, re, stmp, septmp, n, work.Matrix(n, opts), &iwork); err != nil {
				(*lmax)[2] = knt
				(*ninfo)[2] = (*ninfo)[2] + 1
				goto label240
			}
			for i = 1; i <= n; i++ {
				if septmp.Get(i-1) != sep.Get(i-1) {
					vmax = one / eps
				}
				if stmp.Get(i-1) != s.Get(i-1) {
					vmax = one / eps
				}
			}

			//        Compute eigenvalue condition numbers using SELECT and compare
			stmp.Copy(n, dum, 0, 1)
			septmp.Copy(n, dum, 0, 1)
			if _, err = golapack.Dtrsna('E', 'S', _select, n, t, le, re, stmp, septmp, n, work.Matrix(n, opts), &iwork); err != nil {
				(*lmax)[2] = knt
				(*ninfo)[2] = (*ninfo)[2] + 1
				goto label240
			}
			for i = 1; i <= n; i++ {
				if stmp.Get(i-1) != s.Get(i-1) {
					vmax = one / eps
				}
				if septmp.Get(i-1) != dum.Get(0) {
					vmax = one / eps
				}
			}

			//        Compute eigenvector condition numbers using SELECT and compare
			stmp.Copy(n, dum, 0, 1)
			septmp.Copy(n, dum, 0, 1)
			if _, err = golapack.Dtrsna('V', 'S', _select, n, t, le, re, stmp, septmp, n, work.Matrix(n, opts), &iwork); err != nil {
				(*lmax)[2] = knt
				(*ninfo)[2] = (*ninfo)[2] + 1
				goto label240
			}
			for i = 1; i <= n; i++ {
				if stmp.Get(i-1) != dum.Get(0) {
					vmax = one / eps
				}
				if septmp.Get(i-1) != sep.Get(i-1) {
					vmax = one / eps
				}
			}
			if vmax > rmax.Get(0) {
				rmax.Set(0, vmax)
				if (*ninfo)[0] == 0 {
					(*lmax)[0] = knt
				}
			}

			//        Select first real and first complex eigenvalue
			if wi.Get(0) == zero {
				lcmp[0] = 1
				ifnd = 0
				for i = 2; i <= n; i++ {
					if ifnd == 1 || wi.Get(i-1) == zero {
						_select[i-1] = false
					} else {
						ifnd = 1
						lcmp[1] = i
						lcmp[2] = i + 1
						re.Off(0, 1).Vector().Copy(n, re.Off(0, i-1).Vector(), 1, 1)
						re.Off(0, 2).Vector().Copy(n, re.Off(0, i).Vector(), 1, 1)
						le.Off(0, 1).Vector().Copy(n, le.Off(0, i-1).Vector(), 1, 1)
						le.Off(0, 2).Vector().Copy(n, le.Off(0, i).Vector(), 1, 1)
					}
				}
				if ifnd == 0 {
					icmp = 1
				} else {
					icmp = 3
				}
			} else {
				lcmp[0] = 1
				lcmp[1] = 2
				ifnd = 0
				for i = 3; i <= n; i++ {
					if ifnd == 1 || wi.Get(i-1) != zero {
						_select[i-1] = false
					} else {
						lcmp[2] = i
						ifnd = 1
						re.Off(0, 2).Vector().Copy(n, re.Off(0, i-1).Vector(), 1, 1)
						le.Off(0, 2).Vector().Copy(n, le.Off(0, i-1).Vector(), 1, 1)
					}
				}
				if ifnd == 0 {
					icmp = 2
				} else {
					icmp = 3
				}
			}

			//        Compute all selected condition numbers
			stmp.Copy(icmp, dum, 0, 1)
			septmp.Copy(icmp, dum, 0, 1)
			if _, err = golapack.Dtrsna('B', 'S', _select, n, t, le, re, stmp, septmp, n, work.Matrix(n, opts), &iwork); err != nil {
				(*lmax)[2] = knt
				(*ninfo)[2] = (*ninfo)[2] + 1
				goto label240
			}
			for i = 1; i <= icmp; i++ {
				j = lcmp[i-1]
				if septmp.Get(i-1) != sep.Get(j-1) {
					vmax = one / eps
				}
				if stmp.Get(i-1) != s.Get(j-1) {
					vmax = one / eps
				}
			}

			//        Compute selected eigenvalue condition numbers
			stmp.Copy(icmp, dum, 0, 1)
			septmp.Copy(icmp, dum, 0, 1)
			if _, err = golapack.Dtrsna('E', 'S', _select, n, t, le, re, stmp, septmp, n, work.Matrix(n, opts), &iwork); err != nil {
				(*lmax)[2] = knt
				(*ninfo)[2] = (*ninfo)[2] + 1
				goto label240
			}
			for i = 1; i <= icmp; i++ {
				j = lcmp[i-1]
				if stmp.Get(i-1) != s.Get(j-1) {
					vmax = one / eps
				}
				if septmp.Get(i-1) != dum.Get(0) {
					vmax = one / eps
				}
			}

			//        Compute selected eigenvector condition numbers
			stmp.Copy(icmp, dum, 0, 1)
			septmp.Copy(icmp, dum, 0, 1)
			if _, err = golapack.Dtrsna('V', 'S', _select, n, t, le, re, stmp, septmp, n, work.Matrix(n, opts), &iwork); err != nil {
				(*lmax)[2] = knt
				(*ninfo)[2] = (*ninfo)[2] + 1
				goto label240
			}
			for i = 1; i <= icmp; i++ {
				j = lcmp[i-1]
				if stmp.Get(i-1) != dum.Get(0) {
					vmax = one / eps
				}
				if septmp.Get(i-1) != sep.Get(j-1) {
					vmax = one / eps
				}
			}
			if vmax > rmax.Get(0) {
				rmax.Set(0, vmax)
				if (*ninfo)[0] == 0 {
					(*lmax)[0] = knt
				}
			}
		label240:
		}
	}

	return
}
