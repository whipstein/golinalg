package eig

import (
	"fmt"
	"math"
	"testing"

	"github.com/whipstein/golinalg/golapack"
)

// Dchkbk tests DGEBAK, a routine for backward transformation of
// the computed right or left eigenvectors if the original matrix
// was preprocessed by balance subroutine DGEBAL.
func Dchkbk(t *testing.T) {
	var eps, rmax, safmin, vmax, x, zero float64
	var _i, i, ihi, ilo, info, j, knt, lde, n, ninfo int

	scale := vf(20)
	lmax := make([]int, 2)
	e := mf(20, 20, opts)
	ein := mf(20, 20, opts)

	lde = 20
	zero = 0.0

	nlist := []int{5, 5, 5, 6, 5, 6, 7}
	ilolist := []int{1, 1, 1, 4, 1, 2, 2}
	ihilist := []int{1, 1, 1, 6, 5, 5, 5}
	scalelist := [][]float64{
		{0.1000e+01, 0.2000e+01, 0.3000e+01, 0.4000e+01, 0.5000e+01},
		{0.1000e+01, 0.2000e+01, 0.3000e+01, 0.2000e+01, 0.1000e+01},
		{0.1000e+01, 0.2000e+01, 0.3000e+01, 0.2000e+01, 0.1000e+01},
		{0.4000e+01, 0.3000e+01, 0.5000e+01, 0.1000e+03, 0.1000e+00, 0.1000e+01},
		{0.1000e+03, 0.1000e+00, 0.1000e-01, 0.1000e+01, 0.1000e+02},
		{0.3000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.4000e+01},
		{0.3000e+01, 0.1000e-02, 0.1000e-01, 0.1000e+02, 0.1000e+00, 0.1000e+01, 0.6000e+01},
	}
	elist := [][]float64{
		{
			0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.1000e+01, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e+01, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e+01,
		},
		{
			0.1000e+01, 0.1000e+01, 0.1000e+01, -0.6667e+00, -0.4167e-01,
			0.0000e+00, -0.2500e+00, -0.6667e+00, 0.1000e+01, 0.1667e+00,
			0.0000e+00, 0.0000e+00, 0.2222e+00, -0.1000e+01, -0.5000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.5000e+00, 0.1000e+01,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, -0.1000e+01,
		},
		{
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.0000e+00, -0.6000e-17, -0.6000e-17, -0.6000e-17, -0.6000e-17,
			0.0000e+00, 0.0000e+00, 0.3600e-34, 0.3600e-34, 0.3600e-34,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
		},
		{
			0.1000e+01, 0.1336e-05, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.0000e+00, 0.1000e+01, 0.0000e+00, -0.3001e-10, -0.3252e-04, 0.1305e-01,
			0.0000e+00, 0.0000e+00, -0.8330e-02, 0.8929e-09, -0.6712e-04, 0.6687e-04,
			0.0000e+00, 0.0000e+00, 0.0000e+00, -0.4455e-05, -0.3355e-02, 0.3345e-02,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.4455e-06, -0.3356e-01, 0.3344e-01,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.4411e-09, 0.1011e+00, 0.1008e+00,
		},
		{
			0.1366e-03, -0.6829e-04, 0.1252e-03, 0.1000e+01, 0.1950e-14,
			0.1000e+01, 0.1000e+01, -0.2776e-16, 0.3601e-05, -0.6073e-17,
			0.2736e+00, -0.1363e+00, 0.2503e+00, -0.3322e-05, -0.2000e-02,
			0.6909e-02, -0.3443e-02, 0.6196e-02, 0.1666e-01, 0.1000e+01,
			0.3899e+00, -0.2033e+00, -0.3420e+00, -0.1000e-02, 0.6000e-14,
		},
		{
			0.1000e+01, 0.1000e+01, 0.2776e-15, -0.2405e-16, 0.0000e+00, 0.1000e+01,
			0.0000e+00, 0.7500e+00, 0.1000e+01, 0.8520e-01, 0.0000e+00, -0.1520e-16,
			0.0000e+00, 0.7500e+00, -0.8093e+00, 0.1000e+01, 0.0000e+00, -0.1520e-16,
			0.0000e+00, 0.7500e+00, -0.9533e-01, -0.5426e+00, 0.1000e+01, -0.1520e-16,
			0.0000e+00, 0.7500e+00, -0.9533e-01, -0.5426e+00, -0.1000e+01, -0.1520e-16,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.4559e-16,
		},
		{
			0.1000e+01, -0.1105e-01, 0.3794e-01, -0.9378e-01, -0.3481e-01, 0.4465e+00, -0.3602e-01,
			0.0000e+00, -0.4556e+00, -0.4545e+00, 0.1000e+01, 0.4639e+00, -0.6512e+00, 0.4781e+00,
			0.0000e+00, -0.2734e+00, -0.7946e+00, 0.6303e+00, 0.1000e+01, -0.6279e+00, 0.1000e+01,
			0.0000e+00, 0.1000e+01, -0.6939e-17, 0.4259e-01, -0.6495e+00, -0.5581e+00, -0.6452e+00,
			0.0000e+00, -0.3904e+00, -0.4029e+00, -0.1685e+00, -0.9429e+00, 0.1000e+01, -0.9371e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, -0.2558e+00, 0.3308e-03,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, -0.1985e-02,
		},
	}
	einlist := [][]float64{
		{
			0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.1000e+01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.1000e+01, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e+01, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.1000e+01,
		},
		{
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, -0.1000e+01,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.5000e+00, 0.1000e+01,
			0.0000e+00, 0.0000e+00, 0.2222e+00, -0.1000e+01, -0.5000e+00,
			0.0000e+00, -0.2500e+00, -0.6667e+00, 0.1000e+01, 0.1667e+00,
			0.1000e+01, 0.1000e+01, 0.1000e+01, -0.6667e+00, -0.4167e-01,
		},
		{
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
			0.0000e+00, 0.0000e+00, 0.3600e-34, 0.3600e-34, 0.3600e-34,
			0.0000e+00, -0.6000e-17, -0.6000e-17, -0.6000e-17, -0.6000e-17,
			0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
		},
		{
			0.0000e+00, 0.0000e+00, 0.0000e+00, -0.4455e-03, -0.3355e+00, 0.3345e+00,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.4455e-07, -0.3356e-02, 0.3344e-02,
			0.0000e+00, 0.1000e+01, 0.0000e+00, -0.3001e-10, -0.3252e-04, 0.1305e-01,
			0.1000e+01, 0.1336e-05, 0.1000e+01, 0.1000e+01, 0.1000e+01, 0.1000e+01,
			0.0000e+00, 0.0000e+00, -0.8330e-02, 0.8929e-09, -0.6712e-04, 0.6687e-04,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.4411e-09, 0.1011e+00, 0.1008e+00,
		},
		{
			0.1366e-01, -0.6829e-02, 0.1252e-01, 0.1000e+03, 0.1950e-12,
			0.1000e+00, 0.1000e+00, -0.2776e-17, 0.3601e-06, -0.6073e-18,
			0.2736e-02, -0.1363e-02, 0.2503e-02, -0.3322e-07, -0.2000e-04,
			0.6909e-02, -0.3443e-02, 0.6196e-02, 0.1666e-01, 0.1000e+01,
			0.3899e+01, -0.2033e+01, -0.3420e+01, -0.1000e-01, 0.6000e-13,
		},
		{
			0.0000e+00, 0.7500e+00, -0.8093e+00, 0.1000e+01, 0.0000e+00, -0.1520e-16,
			0.0000e+00, 0.7500e+00, 0.1000e+01, 0.8520e-01, 0.0000e+00, -0.1520e-16,
			0.1000e+01, 0.1000e+01, 0.2776e-15, -0.2405e-16, 0.0000e+00, 0.1000e+01,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.4559e-16,
			0.0000e+00, 0.7500e+00, -0.9533e-01, -0.5426e+00, -0.1000e+01, -0.1520e-16,
			0.0000e+00, 0.7500e+00, -0.9533e-01, -0.5426e+00, 0.1000e+01, -0.1520e-16,
		},
		{
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, -0.2558e+00, 0.3308e-03,
			0.0000e+00, -0.4556e-03, -0.4545e-03, 0.1000e-02, 0.4639e-03, -0.6512e-03, 0.4781e-03,
			0.1000e+01, -0.1105e-01, 0.3794e-01, -0.9378e-01, -0.3481e-01, 0.4465e+00, -0.3602e-01,
			0.0000e+00, 0.1000e+02, -0.6939e-16, 0.4259e+00, -0.6495e+01, -0.5581e+01, -0.6452e+01,
			0.0000e+00, -0.3904e-01, -0.4029e-01, -0.1685e-01, -0.9429e-01, 0.1000e+00, -0.9371e-01,
			0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, -0.1985e-02,
			0.0000e+00, -0.2734e-02, -0.7946e-02, 0.6303e-02, 0.1000e-01, -0.6279e-02, 0.1000e-01,
		},
	}

	lmax[0] = 0
	lmax[1] = 0
	ninfo = 0
	knt = 0
	rmax = zero
	eps = golapack.Dlamch(Epsilon)
	safmin = golapack.Dlamch(SafeMinimum)

	for _i, n = range nlist {
		ilo = ilolist[_i]
		ihi = ihilist[_i]

		for i = 1; i <= n; i++ {
			scale.Set(i-1, scalelist[_i][i-1])
		}
		for i = 1; i <= n; i++ {
			for j = 1; j <= n; j++ {
				e.Set(i-1, j-1, elist[_i][(i-1)*(n)+j-1])
			}
		}

		for i = 1; i <= n; i++ {
			for j = 1; j <= n; j++ {
				ein.Set(i-1, j-1, einlist[_i][(i-1)*(n)+j-1])
			}
		}

		knt = knt + 1
		golapack.Dgebak('B', 'R', &n, &ilo, &ihi, scale, &n, e, &lde, &info)

		if info != 0 {
			t.Fail()
			ninfo = ninfo + 1
			lmax[0] = knt
		}

		vmax = zero
		for i = 1; i <= n; i++ {
			for j = 1; j <= n; j++ {
				x = math.Abs(e.Get(i-1, j-1)-ein.Get(i-1, j-1)) / eps
				if math.Abs(e.Get(i-1, j-1)) > safmin {
					x = x / math.Abs(e.Get(i-1, j-1))
				}
				vmax = math.Max(vmax, x)
			}
		}

		if vmax > rmax {
			lmax[1] = knt
			rmax = vmax
		}

	}

	fmt.Printf(" .. test output of DGEBAK .. \n")

	fmt.Printf(" value of largest test error             = %12.3E\n", rmax)
	fmt.Printf(" example number where info is not zero   = %4d\n", lmax[0])
	fmt.Printf(" example number having largest error     = %4d\n", lmax[1])
	fmt.Printf(" number of examples where info is not 0  = %4d\n", ninfo)
	fmt.Printf(" total number of examples tested         = %4d\n", knt)
}
