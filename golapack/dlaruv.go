package golapack

import "golinalg/mat"

// Dlaruv returns a vector of n random real numbers from a uniform (0,1)
// distribution (n <= 128).
//
// This is an auxiliary routine called by DLARNV and ZLARNV.
func Dlaruv(iseed *[]int, n *int, x *mat.Vector) {
	var one, r float64
	var i, i1, i2, i3, i4, ipw2, it1, it2, it3, it4, lv int
	mm := func() [][]int {
		arr := make([][]int, 128)
		for u := 0; u < 128; u++ {
			arr[u] = make([]int, 4)
		}
		return arr
	}()

	one = 1.0
	lv = 128
	ipw2 = 4096
	r = one / float64(ipw2)

	mm[0][0], mm[0][1], mm[0][2], mm[0][3] = 494, 322, 2508, 2549
	mm[1][0], mm[1][1], mm[1][2], mm[1][3] = 2637, 789, 3754, 1145
	mm[2][0], mm[2][1], mm[2][2], mm[2][3] = 255, 1440, 1766, 2253
	mm[3][0], mm[3][1], mm[3][2], mm[3][3] = 2008, 752, 3572, 305
	mm[4][0], mm[4][1], mm[4][2], mm[4][3] = 1253, 2859, 2893, 3301
	mm[5][0], mm[5][1], mm[5][2], mm[5][3] = 3344, 123, 307, 1065
	mm[6][0], mm[6][1], mm[6][2], mm[6][3] = 4084, 1848, 1297, 3133
	mm[7][0], mm[7][1], mm[7][2], mm[7][3] = 1739, 643, 3966, 2913
	mm[8][0], mm[8][1], mm[8][2], mm[8][3] = 3143, 2405, 758, 3285
	mm[9][0], mm[9][1], mm[9][2], mm[9][3] = 3468, 2638, 2598, 1241
	mm[10][0], mm[10][1], mm[10][2], mm[10][3] = 688, 2344, 3406, 1197
	mm[11][0], mm[11][1], mm[11][2], mm[11][3] = 1657, 46, 2922, 3729
	mm[12][0], mm[12][1], mm[12][2], mm[12][3] = 1238, 3814, 1038, 2501
	mm[13][0], mm[13][1], mm[13][2], mm[13][3] = 3166, 913, 2934, 1673
	mm[14][0], mm[14][1], mm[14][2], mm[14][3] = 1292, 3649, 2091, 541
	mm[15][0], mm[15][1], mm[15][2], mm[15][3] = 3422, 339, 2451, 2753
	mm[16][0], mm[16][1], mm[16][2], mm[16][3] = 1270, 3808, 1580, 949
	mm[17][0], mm[17][1], mm[17][2], mm[17][3] = 2016, 822, 1958, 2361
	mm[18][0], mm[18][1], mm[18][2], mm[18][3] = 154, 2832, 2055, 1165
	mm[19][0], mm[19][1], mm[19][2], mm[19][3] = 2862, 3078, 1507, 4081
	mm[20][0], mm[20][1], mm[20][2], mm[20][3] = 697, 3633, 1078, 2725
	mm[21][0], mm[21][1], mm[21][2], mm[21][3] = 1706, 2970, 3273, 3305
	mm[22][0], mm[22][1], mm[22][2], mm[22][3] = 491, 637, 17, 3069
	mm[23][0], mm[23][1], mm[23][2], mm[23][3] = 931, 2249, 854, 3617
	mm[24][0], mm[24][1], mm[24][2], mm[24][3] = 1444, 2081, 2916, 3733
	mm[25][0], mm[25][1], mm[25][2], mm[25][3] = 444, 4019, 3971, 409
	mm[26][0], mm[26][1], mm[26][2], mm[26][3] = 3577, 1478, 2889, 2157
	mm[27][0], mm[27][1], mm[27][2], mm[27][3] = 3944, 242, 3831, 1361
	mm[28][0], mm[28][1], mm[28][2], mm[28][3] = 2184, 481, 2621, 3973
	mm[29][0], mm[29][1], mm[29][2], mm[29][3] = 1661, 2075, 1541, 1865
	mm[30][0], mm[30][1], mm[30][2], mm[30][3] = 3482, 4058, 893, 2525
	mm[31][0], mm[31][1], mm[31][2], mm[31][3] = 657, 622, 736, 1409
	mm[32][0], mm[32][1], mm[32][2], mm[32][3] = 3023, 3376, 3992, 3445
	mm[33][0], mm[33][1], mm[33][2], mm[33][3] = 3618, 812, 787, 3577
	mm[34][0], mm[34][1], mm[34][2], mm[34][3] = 1267, 234, 2125, 77
	mm[35][0], mm[35][1], mm[35][2], mm[35][3] = 1828, 641, 2364, 3761
	mm[36][0], mm[36][1], mm[36][2], mm[36][3] = 164, 4005, 2460, 2149
	mm[37][0], mm[37][1], mm[37][2], mm[37][3] = 3798, 1122, 257, 1449
	mm[38][0], mm[38][1], mm[38][2], mm[38][3] = 3087, 3135, 1574, 3005
	mm[39][0], mm[39][1], mm[39][2], mm[39][3] = 2400, 2640, 3912, 225
	mm[40][0], mm[40][1], mm[40][2], mm[40][3] = 2870, 2302, 1216, 85
	mm[41][0], mm[41][1], mm[41][2], mm[41][3] = 3876, 40, 3248, 3673
	mm[42][0], mm[42][1], mm[42][2], mm[42][3] = 1905, 1832, 3401, 3117
	mm[43][0], mm[43][1], mm[43][2], mm[43][3] = 1593, 2247, 2124, 3089
	mm[44][0], mm[44][1], mm[44][2], mm[44][3] = 1797, 2034, 2762, 1349
	mm[45][0], mm[45][1], mm[45][2], mm[45][3] = 1234, 2637, 149, 2057
	mm[46][0], mm[46][1], mm[46][2], mm[46][3] = 3460, 1287, 2245, 413
	mm[47][0], mm[47][1], mm[47][2], mm[47][3] = 328, 1691, 166, 65
	mm[48][0], mm[48][1], mm[48][2], mm[48][3] = 2861, 496, 466, 1845
	mm[49][0], mm[49][1], mm[49][2], mm[49][3] = 1950, 1597, 4018, 697
	mm[50][0], mm[50][1], mm[50][2], mm[50][3] = 617, 2394, 1399, 3085
	mm[51][0], mm[51][1], mm[51][2], mm[51][3] = 2070, 2584, 190, 3441
	mm[52][0], mm[52][1], mm[52][2], mm[52][3] = 3331, 1843, 2879, 1573
	mm[53][0], mm[53][1], mm[53][2], mm[53][3] = 769, 336, 153, 3689
	mm[54][0], mm[54][1], mm[54][2], mm[54][3] = 1558, 1472, 2320, 2941
	mm[55][0], mm[55][1], mm[55][2], mm[55][3] = 2412, 2407, 18, 929
	mm[56][0], mm[56][1], mm[56][2], mm[56][3] = 2800, 433, 712, 533
	mm[57][0], mm[57][1], mm[57][2], mm[57][3] = 189, 2096, 2159, 2841
	mm[58][0], mm[58][1], mm[58][2], mm[58][3] = 287, 1761, 2318, 4077
	mm[59][0], mm[59][1], mm[59][2], mm[59][3] = 2045, 2810, 2091, 721
	mm[60][0], mm[60][1], mm[60][2], mm[60][3] = 1227, 566, 3443, 2821
	mm[61][0], mm[61][1], mm[61][2], mm[61][3] = 2838, 442, 1510, 2249
	mm[62][0], mm[62][1], mm[62][2], mm[62][3] = 209, 41, 449, 2397
	mm[63][0], mm[63][1], mm[63][2], mm[63][3] = 2770, 1238, 1956, 2817
	mm[64][0], mm[64][1], mm[64][2], mm[64][3] = 3654, 1086, 2201, 245
	mm[65][0], mm[65][1], mm[65][2], mm[65][3] = 3993, 603, 3137, 1913
	mm[66][0], mm[66][1], mm[66][2], mm[66][3] = 192, 840, 3399, 1997
	mm[67][0], mm[67][1], mm[67][2], mm[67][3] = 2253, 3168, 1321, 3121
	mm[68][0], mm[68][1], mm[68][2], mm[68][3] = 3491, 1499, 2271, 997
	mm[69][0], mm[69][1], mm[69][2], mm[69][3] = 2889, 1084, 3667, 1833
	mm[70][0], mm[70][1], mm[70][2], mm[70][3] = 2857, 3438, 2703, 2877
	mm[71][0], mm[71][1], mm[71][2], mm[71][3] = 2094, 2408, 629, 1633
	mm[72][0], mm[72][1], mm[72][2], mm[72][3] = 1818, 1589, 2365, 981
	mm[73][0], mm[73][1], mm[73][2], mm[73][3] = 688, 2391, 2431, 2009
	mm[74][0], mm[74][1], mm[74][2], mm[74][3] = 1407, 288, 1113, 941
	mm[75][0], mm[75][1], mm[75][2], mm[75][3] = 634, 26, 3922, 2449
	mm[76][0], mm[76][1], mm[76][2], mm[76][3] = 3231, 512, 2554, 197
	mm[77][0], mm[77][1], mm[77][2], mm[77][3] = 815, 1456, 184, 2441
	mm[78][0], mm[78][1], mm[78][2], mm[78][3] = 3524, 171, 2099, 285
	mm[79][0], mm[79][1], mm[79][2], mm[79][3] = 1914, 1677, 3228, 1473
	mm[80][0], mm[80][1], mm[80][2], mm[80][3] = 516, 2657, 4012, 2741
	mm[81][0], mm[81][1], mm[81][2], mm[81][3] = 164, 2270, 1921, 3129
	mm[82][0], mm[82][1], mm[82][2], mm[82][3] = 303, 2587, 3452, 909
	mm[83][0], mm[83][1], mm[83][2], mm[83][3] = 2144, 2961, 3901, 2801
	mm[84][0], mm[84][1], mm[84][2], mm[84][3] = 3480, 1970, 572, 421
	mm[85][0], mm[85][1], mm[85][2], mm[85][3] = 119, 1817, 3309, 4073
	mm[86][0], mm[86][1], mm[86][2], mm[86][3] = 3357, 676, 3171, 2813
	mm[87][0], mm[87][1], mm[87][2], mm[87][3] = 837, 1410, 817, 2337
	mm[88][0], mm[88][1], mm[88][2], mm[88][3] = 2826, 3723, 3039, 1429
	mm[89][0], mm[89][1], mm[89][2], mm[89][3] = 2332, 2803, 1696, 1177
	mm[90][0], mm[90][1], mm[90][2], mm[90][3] = 2089, 3185, 1256, 1901
	mm[91][0], mm[91][1], mm[91][2], mm[91][3] = 3780, 184, 3715, 81
	mm[92][0], mm[92][1], mm[92][2], mm[92][3] = 1700, 663, 2077, 1669
	mm[93][0], mm[93][1], mm[93][2], mm[93][3] = 3712, 499, 3019, 2633
	mm[94][0], mm[94][1], mm[94][2], mm[94][3] = 150, 3784, 1497, 2269
	mm[95][0], mm[95][1], mm[95][2], mm[95][3] = 2000, 1631, 1101, 129
	mm[96][0], mm[96][1], mm[96][2], mm[96][3] = 3375, 1925, 717, 1141
	mm[97][0], mm[97][1], mm[97][2], mm[97][3] = 1621, 3912, 51, 249
	mm[98][0], mm[98][1], mm[98][2], mm[98][3] = 3090, 1398, 981, 3917
	mm[99][0], mm[99][1], mm[99][2], mm[99][3] = 3765, 1349, 1978, 2481
	mm[100][0], mm[100][1], mm[100][2], mm[100][3] = 1149, 1441, 1813, 3941
	mm[101][0], mm[101][1], mm[101][2], mm[101][3] = 3146, 2224, 3881, 2217
	mm[102][0], mm[102][1], mm[102][2], mm[102][3] = 33, 2411, 76, 2749
	mm[103][0], mm[103][1], mm[103][2], mm[103][3] = 3082, 1907, 3846, 3041
	mm[104][0], mm[104][1], mm[104][2], mm[104][3] = 2741, 3192, 3694, 1877
	mm[105][0], mm[105][1], mm[105][2], mm[105][3] = 359, 2786, 1682, 345
	mm[106][0], mm[106][1], mm[106][2], mm[106][3] = 3316, 382, 124, 2861
	mm[107][0], mm[107][1], mm[107][2], mm[107][3] = 1749, 37, 1660, 1809
	mm[108][0], mm[108][1], mm[108][2], mm[108][3] = 185, 759, 3997, 3141
	mm[109][0], mm[109][1], mm[109][2], mm[109][3] = 2784, 2948, 479, 2825
	mm[110][0], mm[110][1], mm[110][2], mm[110][3] = 2202, 1862, 1141, 157
	mm[111][0], mm[111][1], mm[111][2], mm[111][3] = 2199, 3802, 886, 2881
	mm[112][0], mm[112][1], mm[112][2], mm[112][3] = 1364, 2423, 3514, 3637
	mm[113][0], mm[113][1], mm[113][2], mm[113][3] = 1244, 2051, 1301, 1465
	mm[114][0], mm[114][1], mm[114][2], mm[114][3] = 2020, 2295, 3604, 2829
	mm[115][0], mm[115][1], mm[115][2], mm[115][3] = 3160, 1332, 1888, 2161
	mm[116][0], mm[116][1], mm[116][2], mm[116][3] = 2785, 1832, 1836, 3365
	mm[117][0], mm[117][1], mm[117][2], mm[117][3] = 2772, 2405, 1990, 361
	mm[118][0], mm[118][1], mm[118][2], mm[118][3] = 1217, 3638, 2058, 2685
	mm[119][0], mm[119][1], mm[119][2], mm[119][3] = 1822, 3661, 692, 3745
	mm[120][0], mm[120][1], mm[120][2], mm[120][3] = 1245, 327, 1194, 2325
	mm[121][0], mm[121][1], mm[121][2], mm[121][3] = 2252, 3660, 20, 3609
	mm[122][0], mm[122][1], mm[122][2], mm[122][3] = 3904, 716, 3285, 3821
	mm[123][0], mm[123][1], mm[123][2], mm[123][3] = 2774, 1842, 2046, 3537
	mm[124][0], mm[124][1], mm[124][2], mm[124][3] = 997, 3987, 2107, 517
	mm[125][0], mm[125][1], mm[125][2], mm[125][3] = 2573, 1368, 3508, 3017
	mm[126][0], mm[126][1], mm[126][2], mm[126][3] = 1148, 1848, 3525, 2141
	mm[127][0], mm[127][1], mm[127][2], mm[127][3] = 545, 2366, 3801, 1537

	i1 = (*iseed)[0]
	i2 = (*iseed)[1]
	i3 = (*iseed)[2]
	i4 = (*iseed)[3]

	for i = 1; i <= minint(*n, lv); i++ {

	label20:
		;
		//        Multiply the seed by i-th power of the multiplier modulo 2**48
		it4 = i4 * mm[i-1][3]
		it3 = it4 / ipw2
		it4 = it4 - ipw2*it3
		it3 = it3 + i3*mm[i-1][3] + i4*mm[i-1][2]
		it2 = it3 / ipw2
		it3 = it3 - ipw2*it2
		it2 = it2 + i2*mm[i-1][3] + i3*mm[i-1][2] + i4*mm[i-1][1]
		it1 = it2 / ipw2
		it2 = it2 - ipw2*it1
		it1 = it1 + i1*mm[i-1][3] + i2*mm[i-1][2] + i3*mm[i-1][1] + i4*mm[i-1][0]
		it1 = it1 % ipw2

		//        Convert 48-bit integer to a real number in the interval (0,1)
		x.Set(i-1, r*(float64(it1)+r*(float64(it2)+r*(float64(it3)+r*float64(it4)))))

		if x.Get(i-1) == 1.0 {
			//           If a real number has n bits of precision, and the first
			//           n bits of the 48-bit integer above happen to be all 1 (which
			//           will occur about once every 2**n calls), then X( I ) will
			//           be rounded to exactly 1.0.
			//           Since X( I ) is not supposed to return exactly 0.0 or 1.0,
			//           the statistically correct thing to do in this situation is
			//           simply to iterate again.
			//           N.B. the case X( I ) = 0.0 should not be possible.
			i1 = i1 + 2
			i2 = i2 + 2
			i3 = i3 + 2
			i4 = i4 + 2
			goto label20
		}

	}

	//     Return final value of seed
	(*iseed)[0] = it1
	(*iseed)[1] = it2
	(*iseed)[2] = it3
	(*iseed)[3] = it4
}
